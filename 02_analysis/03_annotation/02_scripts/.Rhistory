message(accessions[i.f])
gr.remove = gr.g.len$group[(gr.g.len$acc == accessions[i.f]) & (gr.g.len$low)]
gff.acc = read.table(paste(path.genes, acc.gff.files[i.f], sep = ''), stringsAsFactors = F)
gff.acc$gr = ''
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 == 'gene',] = gff.acc.g
gff.acc.g = gff.acc[gff.acc$V3 != 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 != 'gene',] = gff.acc.g
gff.acc.trimmed = gff.acc[!(gff.acc$gr %in% gr.remove),]
write.table(gff.acc.trimmed,
paste(path.genes.new, acc.gff.files[i.f], sep = ''), sep = '\t', quote = F, row.names = F, col.names = F)
gff.acc.trimmed[1,4] = 10000000
write.table(gff.acc.trimmed,
paste(path.genes.new, acc.gff.files[i.f], sep = ''), sep = '\t', quote = F, row.names = F, col.names = F)
options(scipen = 999)
write.table(gff.acc.trimmed,
paste(path.genes.new, acc.gff.files[i.f], sep = ''), sep = '\t', quote = F, row.names = F, col.names = F)
options(scipen = 0)
message(accessions[i.f])
gff.acc = read.table(paste(path.genes, acc.gff.files[i.f], sep = ''), stringsAsFactors = F)
gff.acc$len = abs(gff.acc$V4 - gff.acc$V5) + 1
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.m = gff.acc[gff.acc$V3 == 'mRNA',]
gr.acc.g <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gr.acc.m <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.m$V9)
length(gr.acc.m)
length(unique(gr.acc.m))
length(unique(gr.acc.g))
gr.acc.g
length(gr.acc.g)
rownames(gff.acc.g) = gr.acc.g
x1 = gff.acc.g$V5[gr.acc.m]
sum(gr.acc.m$V5 > x1)
sum(gff.acc.m$V5 > x1)
x1 = gff.acc.g[gr.acc.m, 'V5']
sum(gff.acc.m$V5 > x1)
which(gff.acc.m$V5 > x1)
gff.acc.m[7179,]
acc.gff.files[i.f]
f.name.old <- sub("(\\.[a-zA-Z0-9]+)$", "_old\\1", acc.gff.files[i.f])
f.name.old
f.name.old <- sub("(\\.[a-zA-Z0-9]+)$", "_old\\1", acc.gff.files[i.f])
options(scipen = 999)
write.table(gff.acc[,1:9],
paste(path.genes, f.name.old, sep = ''), sep = '\t', quote = F, row.names = F, col.names = F)
options(scipen = 0)
options(scipen = 999)
write.table(gff.acc[,1:9],
paste(path.genes, 'old_', acc.gff.files[i.f], sep = ''),
sep = '\t', quote = F, row.names = F, col.names = F)
options(scipen = 0)
# Find the minimum length of every gene by mRNA in "own files"
# path.genes
acc.gff.files <- list.files(path = path.genes, pattern = "^genes_v04_\\d+\\.gff$")
# Извлекаем числа из имен файлов
accessions <- gsub("^genes_v04_(\\d+)\\.gff$", "\\1", acc.gff.files)
gr.m.len = c()
gr.g.len = c()
for(i.f in 1:length(acc.gff.files)){
message(accessions[i.f])
gff.acc = read.table(paste(path.genes, acc.gff.files[i.f], sep = ''), stringsAsFactors = F)
gff.acc$len = abs(gff.acc$V4 - gff.acc$V5) + 1
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.m = gff.acc[gff.acc$V3 == 'mRNA',]
gr.acc.g <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gr.acc.m <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.m$V9)
# Check boundaries
rownames(gff.acc.g) = gr.acc.g
x1 = gff.acc.g[gr.acc.m, 'V5']
idx.x1 = gff.acc.m$V5 > x1
if(sum(idx.x1) > 0){
# save previous file as "old"
options(scipen = 999)
write.table(gff.acc[,1:9],
paste(path.genes, 'old_', acc.gff.files[i.f], sep = ''),
sep = '\t', quote = F, row.names = F, col.names = F)
options(scipen = 0)
x1[idx.x1] = gff.acc.m$V5[idx.x1]
gff.acc.g[gr.acc.m, 'V5'] = x1
gff.acc[gff.acc$V3 == 'gene',] = gff.acc.g
options(scipen = 999)
write.table(gff.acc[,1:9],
paste(path.genes, acc.gff.files[i.f], sep = ''), sep = '\t', quote = F, row.names = F, col.names = F)
options(scipen = 0)
}
gr.m.len = rbind(gr.m.len, data.frame(group = gr.acc.m, len = gff.acc.m$len, acc = accessions[i.f]))
gr.g.len = rbind(gr.g.len, data.frame(group = gr.acc.g, len = gff.acc.g$len, acc = accessions[i.f]))
}
gr.len.min = tapply(gr.m.len$len, gr.m.len$group, min)
# tair-10 lengths
tair10.names <- all_lines[grep("^>",readLines(paste(path.tair10, 'new_genes.fasta', sep = '')))]
tair10.len = as.numeric(sapply(tair10.names, function(s) strsplit(s, '\\|')[[1]][5]))
names(tair10.len) = stringr::str_extract(tair10.names, "[^|]+$")
gr.len.min = c(gr.len.min, tair10.len)
gr.g.len$low = gr.g.len$len < gr.len.min[gr.g.len$group] * 0.8
gr.g.len$min = gr.len.min[gr.g.len$group]
beepr::beep()
table(gr.g.len$low)
gr.g.len[gr.g.len$group == 'AT1Gr10002016',]
# Find the minimum length of every gene by mRNA in "own files"
# path.genes
acc.gff.files <- list.files(path = path.genes, pattern = "^genes_v04_\\d+\\.gff$")
# Извлекаем числа из имен файлов
accessions <- gsub("^genes_v04_(\\d+)\\.gff$", "\\1", acc.gff.files)
gr.m.len = c()
gr.g.len = c()
for(i.f in 1:length(acc.gff.files)){
message(accessions[i.f])
gff.acc = read.table(paste(path.genes, acc.gff.files[i.f], sep = ''), stringsAsFactors = F)
gff.acc$len = abs(gff.acc$V4 - gff.acc$V5) + 1
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.m = gff.acc[gff.acc$V3 == 'mRNA',]
gr.acc.g <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gr.acc.m <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.m$V9)
# Check boundaries
rownames(gff.acc.g) = gr.acc.g
x1 = gff.acc.g[gr.acc.m, 'V5']
idx.x1 = gff.acc.m$V5 > x1
if(sum(idx.x1) > 0){
# # save previous file as "old"
# options(scipen = 999)
# write.table(gff.acc[,1:9],
#             paste(path.genes, 'old_', acc.gff.files[i.f], sep = ''),
#             sep = '\t', quote = F, row.names = F, col.names = F)
# options(scipen = 0)
x1[idx.x1] = gff.acc.m$V5[idx.x1]
gff.acc.g[gr.acc.m, 'V5'] = x1
gff.acc[gff.acc$V3 == 'gene',] = gff.acc.g
gff.acc.g$len = abs(gff.acc.g$V4 - gff.acc.g$V5) + 1
options(scipen = 999)
write.table(gff.acc[,1:9],
paste(path.genes, acc.gff.files[i.f], sep = ''), sep = '\t', quote = F, row.names = F, col.names = F)
options(scipen = 0)
}
gr.m.len = rbind(gr.m.len, data.frame(group = gr.acc.m, len = gff.acc.m$len, acc = accessions[i.f]))
gr.g.len = rbind(gr.g.len, data.frame(group = gr.acc.g, len = gff.acc.g$len, acc = accessions[i.f]))
}
gr.g.len[gr.g.len$group == 'AT1Gr10002016',]
i.f = 1
i.f = 2
message(accessions[i.f])
gff.acc = read.table(paste(path.genes, acc.gff.files[i.f], sep = ''), stringsAsFactors = F)
gff.acc$len = abs(gff.acc$V4 - gff.acc$V5) + 1
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.m = gff.acc[gff.acc$V3 == 'mRNA',]
gr.acc.g <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gr.acc.m <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.m$V9)
gr.m.len = rbind(gr.m.len, data.frame(group = gr.acc.m, len = gff.acc.m$len, acc = accessions[i.f]))
gr.g.len = rbind(gr.g.len, data.frame(group = gr.acc.g, len = gff.acc.g$len, acc = accessions[i.f]))
head(gr.m.len)
# path.genes
acc.gff.files <- list.files(path = path.genes, pattern = "^genes_v04_\\d+\\.gff$")
# Извлекаем числа из имен файлов
accessions <- gsub("^genes_v04_(\\d+)\\.gff$", "\\1", acc.gff.files)
gr.m.len = c()
gr.g.len = c()
for(i.f in 1:length(acc.gff.files)){
message(accessions[i.f])
gff.acc = read.table(paste(path.genes, acc.gff.files[i.f], sep = ''), stringsAsFactors = F)
gff.acc$len = abs(gff.acc$V4 - gff.acc$V5) + 1
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.m = gff.acc[gff.acc$V3 == 'mRNA',]
gr.acc.g <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gr.acc.m <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.m$V9)
# # Check boundaries
# rownames(gff.acc.g) = gr.acc.g
# x1 = gff.acc.g[gr.acc.m, 'V5']
# idx.x1 = gff.acc.m$V5 > x1
# if(sum(idx.x1) > 0){
#
#   # # save previous file as "old"
#   # options(scipen = 999)
#   # write.table(gff.acc[,1:9],
#   #             paste(path.genes, 'old_', acc.gff.files[i.f], sep = ''),
#   #             sep = '\t', quote = F, row.names = F, col.names = F)
#   # options(scipen = 0)
#
#
#   x1[idx.x1] = gff.acc.m$V5[idx.x1]
#   gff.acc.g[gr.acc.m, 'V5'] = x1
#   gff.acc[gff.acc$V3 == 'gene',] = gff.acc.g
#   gff.acc.g$len = abs(gff.acc.g$V4 - gff.acc.g$V5) + 1
#
#   options(scipen = 999)
#   write.table(gff.acc[,1:9],
#               paste(path.genes, acc.gff.files[i.f], sep = ''), sep = '\t', quote = F, row.names = F, col.names = F)
#   options(scipen = 0)
#
# }
gr.m.len = rbind(gr.m.len, data.frame(group = gr.acc.m, len = gff.acc.m$len, acc = accessions[i.f]))
gr.g.len = rbind(gr.g.len, data.frame(group = gr.acc.g, len = gff.acc.g$len, acc = accessions[i.f]))
}
gr.len.min = tapply(gr.m.len$len, gr.m.len$group, min)
gr.len.min.g = tapply(gr.g.len$len, gr.g.len$group, min)
sum(gr.len.min.g[names(gr.len.min)] < gr.len.min)
idx = (gr.len.min.g[names(gr.len.min)] < gr.len.min)
sum(idx)
length(idx)
hist(gr.len.min.g[names(gr.len.min)][idx] - gr.len.min[idx])
gr.len.min = tapply(gr.m.len$len, gr.m.len$group, min)
gr.len.min.g = tapply(gr.g.len$len, gr.g.len$group, max)
idx = (gr.len.min.g[names(gr.len.min)] < gr.len.min)
gr.len.min = tapply(gr.m.len$len, gr.m.len$group, min)
gr.len.max.g = tapply(gr.g.len$len, gr.g.len$group, max)
idx = (gr.len.max.g[names(gr.len.min)] < gr.len.min)
sum(idx)
hist(gr.len.max.g[names(gr.len.min)][idx] - gr.len.min[idx])
xx = names(gr.len.min[idx])
gr.g.len[gr.g.len$group %in% xx, ]
gr.len.min = tapply(gr.m.len$len, gr.m.len$group, min)
gr.len.max.g = tapply(gr.g.len$len, gr.g.len$group, max)
idx = (gr.len.max.g[names(gr.len.min)] < gr.len.min)
gr.len.min[idx]
gr.len.max.g[names(gr.len.min)][idx]
gr.g.len[gr.g.len$group == 'AT2Gr10000591',]
gr.m.len[gr.m.len$group == 'AT2Gr10000591',]
# Find the minimum length of every gene by mRNA in "own files"
# path.genes
acc.gff.files <- list.files(path = path.genes, pattern = "^genes_v04_\\d+\\.gff$")
# Извлекаем числа из имен файлов
accessions <- gsub("^genes_v04_(\\d+)\\.gff$", "\\1", acc.gff.files)
gr.m.len = c()
gr.g.len = c()
for(i.f in 1:length(acc.gff.files)){
message(accessions[i.f])
gff.acc = read.table(paste(path.genes, acc.gff.files[i.f], sep = ''), stringsAsFactors = F)
gff.acc$len = abs(gff.acc$V4 - gff.acc$V5) + 1
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.m = gff.acc[gff.acc$V3 == 'mRNA',]
gr.acc.g <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gr.acc.m <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.m$V9)
gr.m.len = rbind(gr.m.len, data.frame(group = gr.acc.m, len = gff.acc.m$len, acc = accessions[i.f]))
gr.g.len = rbind(gr.g.len, data.frame(group = gr.acc.g, len = gff.acc.g$len, acc = accessions[i.f]))
}
gr.len.min = tapply(gr.m.len$len, gr.m.len$group, min)
# tair-10 lengths
tair10.names <- all_lines[grep("^>",readLines(paste(path.tair10, 'new_genes.fasta', sep = '')))]
tair10.len = as.numeric(sapply(tair10.names, function(s) strsplit(s, '\\|')[[1]][5]))
names(tair10.len) = stringr::str_extract(tair10.names, "[^|]+$")
gr.len.min = c(gr.len.min, tair10.len)
gr.g.len$low = gr.g.len$len < gr.len.min[gr.g.len$group] * 0.8
gr.g.len$min = gr.len.min[gr.g.len$group]
beepr::beep()
table(gr.g.len$low)
# path.genes
acc.gff.files <- list.files(path = path.genes, pattern = "^genes_v04_\\d+\\.gff$")
# Извлекаем числа из имен файлов
accessions <- gsub("^genes_v04_(\\d+)\\.gff$", "\\1", acc.gff.files)
gr.g.acc = matrix(0, nrow = length(unique(gff.genes$group)), ncol = length(accessions),
dimnames = list(unique(gff.genes$group), accessions))
gr.m.acc = matrix(0, nrow = length(unique(gff.genes$group)), ncol = length(accessions),
dimnames = list(unique(gff.genes$group), accessions))
for(i.f in 1:length(acc.gff.files)){
message(accessions[i.f])
gff.acc = read.table(paste(path.genes, acc.gff.files[i.f], sep = ''), stringsAsFactors = F)
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.m = gff.acc[gff.acc$V3 == 'mRNA',]
gr.acc.g <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gr.acc.m <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.m$V9)
gr.g.acc[gr.acc.g, accessions[i.f]] = 1
gr.m.acc[gr.acc.m, accessions[i.f]] = 1
}
beepr::beep()
sum(gr.m.acc)
sum(gr.g.acc[gr.m.acc == 1])
sum(gr.g.acc)
## Fix frequency of presence
comb.remove = gr.g.len[gr.g.len$low,]
for(irow in 1:nrow(comb.remove)){
gr.g.acc[comb.remove$group[irow], comb.remove$acc[irow]] = 0
}
sum(gr.g.acc)
sum(gr.g.acc[gr.m.acc == 1])
table(rowSums(gr.m.acc))
table(rowSums(gr.g.acc))
gr.g.acc[gr.m.acc == 1] = 1
table(rowSums(gr.g.acc))
colSums(gr.g.acc)
i.f = 2
message(accessions[i.f])
gr.remove = rownames(gr.g.acc)[gr.g.acc[,i.f] == 0]
'AT1Gr10002016' %in% gr.remove
path.genes.new = paste(path.base, '01_data_common/02_annot_denovo/02_pannagram/genes_05/', sep = '')
if (!dir.exists(path.genes.new)) dir.create(path.genes.new)
for(i.f in 1:length(acc.gff.files)){
gr.remove = rownames(gr.g.acc)[gr.g.acc[,i.f] == 0]
message(accessions[i.f], length(gr.remove))
gff.acc = read.table(paste(path.genes, acc.gff.files[i.f], sep = ''), stringsAsFactors = F)
gff.acc$gr = ''
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 == 'gene',] = gff.acc.g
gff.acc.g = gff.acc[gff.acc$V3 != 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 != 'gene',] = gff.acc.g
gff.acc.trimmed = gff.acc[!(gff.acc$gr %in% gr.remove),]
gff.acc.trimmed[1,4] = 10000000
options(scipen = 999)
write.table(gff.acc.trimmed[,1:9],
paste(path.genes.new, acc.gff.files[i.f], sep = ''), sep = '\t', quote = F, row.names = F, col.names = F)
options(scipen = 0)
}
path.genes.new = paste(path.base, '01_data_common/02_annot_denovo/02_pannagram/genes_05/', sep = '')
if (!dir.exists(path.genes.new)) dir.create(path.genes.new)
for(i.f in 1:length(acc.gff.files)){
gr.remove = rownames(gr.g.acc)[gr.g.acc[,i.f] == 0]
message(paste(accessions[i.f], length(gr.remove)))
gff.acc = read.table(paste(path.genes, acc.gff.files[i.f], sep = ''), stringsAsFactors = F)
gff.acc$gr = ''
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 == 'gene',] = gff.acc.g
gff.acc.g = gff.acc[gff.acc$V3 != 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 != 'gene',] = gff.acc.g
gff.acc.trimmed = gff.acc[!(gff.acc$gr %in% gr.remove),]
gff.acc.trimmed[1,4] = 10000000
options(scipen = 999)
write.table(gff.acc.trimmed[,1:9],
paste(path.genes.new, acc.gff.files[i.f], sep = ''), sep = '\t', quote = F, row.names = F, col.names = F)
options(scipen = 0)
}
dim(gr.g.acc)
acc.gff.files[i.f]
path.genes.new = paste(path.base, '01_data_common/02_annot_denovo/02_pannagram/genes_05/', sep = '')
if (!dir.exists(path.genes.new)) dir.create(path.genes.new)
for(i.f in 1:length(acc.gff.files)){
gr.remove = rownames(gr.g.acc)[gr.g.acc[,i.f] == 0]
message(paste(accessions[i.f], length(gr.remove)))
gff.acc = read.table(paste(path.genes, acc.gff.files[i.f], sep = ''), stringsAsFactors = F)
gff.acc$gr = ''
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 == 'gene',] = gff.acc.g
gff.acc.g = gff.acc[gff.acc$V3 != 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 != 'gene',] = gff.acc.g
gff.acc.trimmed = gff.acc[!(gff.acc$gr %in% gr.remove),]
gff.acc.trimmed[1,4] = 10000000
options(scipen = 999)
write.table(gff.acc.trimmed[,1:9],
paste(path.genes.new, sub("04", "05", acc.gff.files[i.f]) , sep = ''), sep = '\t', quote = F, row.names = F, col.names = F)
options(scipen = 0)
}
gff.pan = read.table(paste(path.genes, 'genes_v04_pangen.gff'), stringsAsFactors = F)
gff.pan = read.table(paste(path.genes, 'genes_v04_pangen.gff', sep = ''), stringsAsFactors = F)
idx.genes = which(gff.pan$V3 == 'gene')
i.f = 1
idx.acc = grep(accessions[i.f], gff.pan$V9)
idx.acc
length(idx.acc)
idx.genes.acc = intersect(idx.genes, idx.acc-1)
length(idx.genes)
length(idx.genes.acc)
gff.pan = read.table(paste(path.genes, 'genes_v04_pangen_cleaning01.gff', sep = ''), stringsAsFactors = F)
idx.genes = which(gff.pan$V3 == 'gene')
length(idx.genes)
idx.acc = grep(accessions[i.f], gff.pan$V9)
idx.genes.acc = intersect(idx.genes, idx.acc-1)
length(idx.genes.acc)
length(idx.genes)
sum(gff.pan$V3[idx.acc] == 'mRNA')
head(idx.acc)
i.f
head(gff.pan[idx.acc], 50)
idx.acc = grep(paste('.',accessions[i.f],sep = ''), gff.pan$V9)
idx.genes.acc = intersect(idx.genes, idx.acc-1)
length(idx.genes.acc)
head(gff.pan[idx.acc,], 50)
setdiff(idx.genes, idx.acc-1)
gff.pan[idx.genes[576051],]
gff.pan[581447,]
colSums(gr.g.acc)
idx.acc = grep(paste('.',accessions[i.f],sep = ''), gff.pan$V9)
gff.acc = gff.pan[sort(c(idx.genes, idx.acc)),]
acc.gff.files[i.f]
path.genes.new = paste(path.base, '01_data_common/02_annot_denovo/02_pannagram/genes_05/', sep = '')
if (!dir.exists(path.genes.new)) dir.create(path.genes.new)
for(i.f in 1:length(acc.gff.files)){
gr.remove = rownames(gr.g.acc)[gr.g.acc[,i.f] == 0]
message(paste(accessions[i.f], length(gr.remove)))
gff.acc = read.table(paste(path.genes, acc.gff.files[i.f], sep = ''), stringsAsFactors = F)
gff.acc$gr = ''
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 == 'gene',] = gff.acc.g
gff.acc.g = gff.acc[gff.acc$V3 != 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 != 'gene',] = gff.acc.g
gff.acc.trimmed = gff.acc[!(gff.acc$gr %in% gr.remove),]
options(scipen = 999)
write.table(gff.acc.trimmed[,1:9],
paste(path.genes.new, sub("04", "05", acc.gff.files[i.f]) , sep = ''),
sep = '\t', quote = F, row.names = F, col.names = F)
options(scipen = 0)
}
gff.pan = read.table(paste(path.genes, 'genes_v04_pangen_cleaning01.gff', sep = ''), stringsAsFactors = F)
idx.genes = which(gff.pan$V3 == 'gene')
for(i.f in 1:length(accessions)){
idx.acc = grep(paste('.',accessions[i.f],sep = ''), gff.pan$V9)
gff.acc = gff.pan[sort(c(idx.genes, idx.acc)),]
gr.remove = rownames(gr.g.acc)[gr.g.acc[,i.f] == 0]
message(paste(accessions[i.f], length(gr.remove)))
gff.acc$gr = ''
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 == 'gene',] = gff.acc.g
gff.acc.g = gff.acc[gff.acc$V3 != 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 != 'gene',] = gff.acc.g
gff.acc.trimmed = gff.acc[!(gff.acc$gr %in% gr.remove),]
options(scipen = 999)
write.table(gff.acc.trimmed[,1:9],
paste(path.genes.new, sub("04", "05_pangen", acc.gff.files[i.f]) , sep = ''),
sep = '\t', quote = F, row.names = F, col.names = F)
options(scipen = 0)
}
x = read.table(paste(path.genes.new, 'genes_v05_1741.gff', sep = ''), stringsAsFactors = F)
y = read.table(paste(path.genes.new, 'genes_v05_pangen_1741.gff', sep = ''), stringsAsFactors = F)
nrow(x)
nrow(y)
which(x$V3 != y$V3[1:nrow(x)])
accessions
i.f = 4
idx.acc = grep(paste('.',accessions[i.f],sep = ''), gff.pan$V9)
gff.acc = gff.pan[unique(sort(c(idx.genes, idx.acc))),]
gr.remove = rownames(gr.g.acc)[gr.g.acc[,i.f] == 0]
message(paste(accessions[i.f], length(gr.remove)))
gff.acc$gr = ''
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 == 'gene',] = gff.acc.g
gff.acc.g = gff.acc[gff.acc$V3 != 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 != 'gene',] = gff.acc.g
gff.acc.trimmed = gff.acc[!(gff.acc$gr %in% gr.remove),]
gff.acc.trimmed[13000,]
gff.pan = read.table(paste(path.genes, 'genes_v04_pangen_cleaning01.gff', sep = ''), stringsAsFactors = F)
idx.genes = which(gff.pan$V3 == 'gene')
for(i.f in 1:length(accessions)){
idx.acc = grep(paste('.',accessions[i.f],sep = ''), gff.pan$V9)
gff.acc = gff.pan[unique(sort(c(idx.genes, idx.acc))),]
gr.remove = rownames(gr.g.acc)[gr.g.acc[,i.f] == 0]
message(paste(accessions[i.f], length(gr.remove)))
gff.acc$gr = ''
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 == 'gene',] = gff.acc.g
gff.acc.g = gff.acc[gff.acc$V3 != 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 != 'gene',] = gff.acc.g
gff.acc.trimmed = gff.acc[!(gff.acc$gr %in% gr.remove),]
options(scipen = 999)
write.table(gff.acc.trimmed[,1:9],
paste(path.genes.new, sub("04", "05_pangen", acc.gff.files[i.f]) , sep = ''),
sep = '\t', quote = F, row.names = F, col.names = F)
options(scipen = 0)
}
x = read.table(paste(path.genes.new, 'genes_v05_1741.gff', sep = ''), stringsAsFactors = F)
y = read.table(paste(path.genes.new, 'genes_v05_pangen_1741.gff', sep = ''), stringsAsFactors = F)
which(x$V3 != y$V3[1:nrow(x)])
paste('.',accessions[i.f],sep = '')
gff.pan = read.table(paste(path.genes, 'genes_v04_pangen_cleaning01.gff', sep = ''), stringsAsFactors = F)
idx.genes = which(gff.pan$V3 == 'gene')
for(i.f in 1:length(accessions)){
idx.acc = grep(paste('\\.',accessions[i.f],sep = ''), gff.pan$V9)
gff.acc = gff.pan[unique(sort(c(idx.genes, idx.acc))),]
gr.remove = rownames(gr.g.acc)[gr.g.acc[,i.f] == 0]
message(paste(accessions[i.f], length(gr.remove)))
gff.acc$gr = ''
gff.acc.g = gff.acc[gff.acc$V3 == 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^;]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 == 'gene',] = gff.acc.g
gff.acc.g = gff.acc[gff.acc$V3 != 'gene',]
gff.acc.g$gr <- gsub("^.*ID=([^\\.]+).*$", "\\1", gff.acc.g$V9)
gff.acc[gff.acc$V3 != 'gene',] = gff.acc.g
gff.acc.trimmed = gff.acc[!(gff.acc$gr %in% gr.remove),]
options(scipen = 999)
write.table(gff.acc.trimmed[,1:9],
paste(path.genes.new, sub("04", "05_pangen", acc.gff.files[i.f]) , sep = ''),
sep = '\t', quote = F, row.names = F, col.names = F)
options(scipen = 0)
}
x = read.table(paste(path.genes.new, 'genes_v05_1741.gff', sep = ''), stringsAsFactors = F)
y = read.table(paste(path.genes.new, 'genes_v05_pangen_1741.gff', sep = ''), stringsAsFactors = F)
which(x$V3 != y$V3[1:nrow(x)])
nrow(x)
nrow(y)
cat(1)
sv.pan = c()
for(i.chr in 1:5){
sv.pan = rbind(sv.pan, readRDS(paste(path.cmp, 'sv_additional_pan_chr_', i.chr, '.rds', sep = '')))
}
library(cultevo)  #hammingdists
library(ggplot2)
library(ggtree)
# library('ggmsa')
library(gridExtra)
library(egg)
path.base = '../../../'
path.data = paste(path.base, '02_analysis/04_sv/01_data/', sep = '')
path.figures = paste(path.base, '02_analysis/04_sv/03_figures/', sep = '')
bubbles = read.table(paste(path.data, 'bubbles_chr1.tsv'))
paste(path.data, 'bubbles_chr1.tsv', sep = '')
path.data
path.base = '../../../'
path.data = paste(path.base, '02_analysis/04_sv/01_data/', sep = '')
path.base
path.base = '../../../'
path.base
