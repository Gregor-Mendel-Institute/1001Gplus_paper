#
# }
#
# pos = c()
# for(i in index){
#   pos = c(pos, blocks$beg[i]:blocks$end[i])
# }
#
# mx = mx[,pos]
# mx.pos = mx.pos[,pos]
#
# # Check that every sequence is sorted
# for(irow in 1:nrow(mx.pos)){
#   p = mx.pos[irow,]
#   p = p[p != 0]
#   if(is.unsorted(p)) print(irow)
#
#   # which( mx.pos[irow,] %in% which(diff(p) !=1))
# }
#
# # p4 = msaplot(mx)
# # p4
mx.pos.real = mx.pos * 0
for(irow in 1:nrow(mx.pos)){
tmp = as.numeric(strsplit(rownames(mx.pos)[irow], '\\|')[[1]][3:4])
idx.nogap = which(mx.pos[irow] != 0)
mx.pos.real[irow, idx.nogap] = tmp[mx.pos[irow, idx.nogap]]
}
return(list(mx = mx, pos = mx.pos.real))
}
n.flank = 30
res = refineMafft(mx, n.flank = n.flank)
mx.cut = res$mx
mx.common = mx.cut[,colSums(mx != '-') >= 2]
msaplot(mx.common)
mx.common.dist = mx2dist(mx.common, ratio = T)
hc = hclust(d = as.dist(mx.common.dist))
plot(hc)
threshold = 0.3
clusters = cutree(hc, h = threshold)
clusters = sort(clusters)
table(clusters)
msaplot(mx[names(clusters),])
threshold = 0.1
clusters = cutree(hc, h = threshold)
clusters = sort(clusters)
table(clusters)
file = 'Gap_2_2_08781_2372098_2381871_flank_30_aligned.fasta'
file.path = paste(path.gaps, file, sep = '')
# Read the alignemnt
aln = readFastaMy(file.path)
mx = toupper(aln2mx(aln))
msaplot(mx)
n.flank = 30
res = refineMafft(mx, n.flank = n.flank)
mx.cut = res$mx
mx.common = mx.cut[,colSums(mx != '-') >= 2]
mx.cut = res$mx
mx.common = mx.cut[,colSums(mx.cut != '-') >= 2]
msaplot(mx.common)
mx.common.dist = mx2dist(mx.common, ratio = T)
hc = hclust(d = as.dist(mx.common.dist))
plot(hc)
threshold = 0.1
clusters = cutree(hc, h = threshold)
clusters = sort(clusters)
table(clusters)
msaplot(mx[names(clusters),])
seqs = mx2seq(mx)
seqs = mx2seq(mx)
path.mattf.tmp = '/Volumes/Samsung_T5/vienn/alignment/new/mafft_tmp/tmp/'
pref = 'tmp4.fasta'
file.tmp = paste(path.mattf.tmp,pref, '_cl_', i.cl,'.fasta', sep = '')
i.cl = 1
s = seqs[clusters == i.cl]
s
file.tmp = paste(path.mattf.tmp,pref, '_cl_', i.cl,'.fasta', sep = '')
file.out = paste(path.mattf.tmp,pref, '_cl_', i.cl,'_out.fasta', sep = '')
writeFastaMy(s, file.tmp)
command <- paste('mafft ',file.tmp,' > output.fasta', sep = '')
system(command)
Sys.setenv(PATH = paste("/Users/annaigolkina/miniconda3/envs/bioinf/", Sys.getenv("PATH"), sep=";"))
Sys.setenv(PATH = paste("/Users/annaigolkina/miniconda3/envs/bioinfbin:", Sys.getenv("PATH"), sep=""))
system("which python")
system("which python")
ч = system("which python")
x = system("which python")
x
command <- paste('mafft ',file.tmp,' > output.fasta', sep = '')
system(command)
Sys.setenv(PATH = paste("/Users/annaigolkina/miniconda3/envs/bioinf/bin/mafft", Sys.getenv("PATH"), sep=""))
system(command)
Sys.setenv(PATH = paste("/Users/annaigolkina/miniconda3/envs/bioinf/bin/mafft", Sys.getenv("PATH"), sep=":"))
Sys.getenv("PATH")
system(command)
Sys.setenv(PATH = paste("/Users/annaigolkina/miniconda3/envs/bioinf/bin/mafft", Sys.getenv("PATH"), sep=":"))
system(command)
Sys.setenv(PATH = paste("/Users/annaigolkina/miniconda3/envs/bioinf/bin", Sys.getenv("PATH"), sep=":"))
system(command)
command <- paste('mafft --op 3 --quiet --ep 0.1  ',file.tmp,' > output.fasta', sep = '')
system(command)
command <- paste('mafft --op 3 --quiet --ep 0.1  ',file.tmp,' > ',file.out, sep = '')
system(command)
mx = aln2mx(aln.cl)
aln.cl = readFastaMy(file.out)
mx = aln2mx(aln.cl)
msaplot(mx)
command <- paste('mafft --op 10 --quiet --ep 0.1  ',file.tmp,' > ',file.out, sep = '')
system(command)
aln.cl = readFastaMy(file.out)
mx = aln2mx(aln.cl)
msaplot(mx)
i.cl
clusters
i.cl = 2
s.cons.all = c()
for(i.cl in 1:length(i.cl)){
pokaz('Cluster', i.cl)
s = seqs[clusters == i.cl]
if(sum(clusters == i.cl) == 1){
s.cons.all[i.cl] = s
next
}
file.tmp = paste(path.mattf.tmp,pref, '_cl_', i.cl,'.fasta', sep = '')
file.out = paste(path.mattf.tmp,pref, '_cl_', i.cl,'_out.fasta', sep = '')
writeFastaMy(s, file.tmp)
command <- paste('mafft --op 10 --quiet --ep 0.1  ',file.tmp,' > ',file.out, sep = '')
system(command)
aln.cl = readFastaMy(file.out)
mx = aln2mx(aln.cl)
msaplot(mx)
s.cons.all[i.cl] = mx2cons(mx)
command <- paste('rm ', file.tmp, sep = '')
system(command)
command <- paste('rm ', file.out, sep = '')
system(command)
}
# Read the alignemnt
aln = readFastaMy(file.path)
mx = toupper(aln2mx(aln))
msaplot(mx)
n.flank = 30
res = refineMafft(mx, n.flank = n.flank)
mx.cut = res$mx
mx.common = mx.cut[,colSums(mx.cut != '-') >= 2]
msaplot(mx.common)
mx.common.dist = mx2dist(mx.common, ratio = T)
hc = hclust(d = as.dist(mx.common.dist))
plot(hc)
threshold = 0.3
clusters = cutree(hc, h = threshold)
clusters = sort(clusters)
table(clusters)
msaplot(mx[names(clusters),])
Sys.setenv(PATH = paste("/Users/annaigolkina/miniconda3/envs/bioinf/bin", Sys.getenv("PATH"), sep=":"))
seqs = mx2seq(mx)
path.mattf.tmp = '/Volumes/Samsung_T5/vienn/alignment/new/mafft_tmp/tmp/'
pref = 'tmp4.fasta'
s.cons.all = c()
for(i.cl in 1:length(i.cl)){
pokaz('Cluster', i.cl)
s = seqs[clusters == i.cl]
if(sum(clusters == i.cl) == 1){
s.cons.all[i.cl] = s
next
}
file.tmp = paste(path.mattf.tmp,pref, '_cl_', i.cl,'.fasta', sep = '')
file.out = paste(path.mattf.tmp,pref, '_cl_', i.cl,'_out.fasta', sep = '')
writeFastaMy(s, file.tmp)
command <- paste('mafft --op 10 --quiet --ep 0.1  ',file.tmp,' > ',file.out, sep = '')
system(command)
aln.cl = readFastaMy(file.out)
mx.cl = aln2mx(aln.cl)
msaplot(mx.cl)
s.cons.all[i.cl] = mx2cons(mx.cl)
command <- paste('rm ', file.tmp, sep = '')
system(command)
command <- paste('rm ', file.out, sep = '')
system(command)
}
i.cl
pokaz('Cluster', i.cl)
s = seqs[clusters == i.cl]
if(sum(clusters == i.cl) == 1){
s.cons.all[i.cl] = s
next
}
file.tmp = paste(path.mattf.tmp,pref, '_cl_', i.cl,'.fasta', sep = '')
file.out = paste(path.mattf.tmp,pref, '_cl_', i.cl,'_out.fasta', sep = '')
writeFastaMy(s, file.tmp)
command <- paste('mafft --op 10 --quiet --ep 0.1  ',file.tmp,' > ',file.out, sep = '')
system(command)
aln.cl = readFastaMy(file.out)
mx.cl = aln2mx(aln.cl)
msaplot(mx.cl)
s.cons.all[i.cl] = mx2cons(mx.cl)
mx2cons(mx.cl)
s.cons.all = c()
for(i.cl in 1:length(i.cl)){
pokaz('Cluster', i.cl)
s = seqs[clusters == i.cl]
if(sum(clusters == i.cl) == 1){
s.cons.all[i.cl] = s
next
}
file.tmp = paste(path.mattf.tmp,pref, '_cl_', i.cl,'.fasta', sep = '')
file.out = paste(path.mattf.tmp,pref, '_cl_', i.cl,'_out.fasta', sep = '')
writeFastaMy(s, file.tmp)
command <- paste('mafft --op 10 --quiet --ep 0.1  ',file.tmp,' > ',file.out, sep = '')
system(command)
aln.cl = readFastaMy(file.out)
mx.cl = aln2mx(aln.cl)
msaplot(mx.cl)
s.cons.all[i.cl] = seq2nt(mx2cons(mx.cl))
command <- paste('rm ', file.tmp, sep = '')
system(command)
command <- paste('rm ', file.out, sep = '')
system(command)
}
Sys.setenv(PATH = paste("/Users/annaigolkina/miniconda3/envs/bioinf/bin", Sys.getenv("PATH"), sep=":"))
seqs = mx2seq(mx)
path.mattf.tmp = '/Volumes/Samsung_T5/vienn/alignment/new/mafft_tmp/tmp/'
pref = 'tmp4.fasta'
s.cons.all = c()
for(i.cl in 1:length(i.cl)){
pokaz('Cluster', i.cl)
s = seqs[clusters == i.cl]
if(sum(clusters == i.cl) == 1){
s.cons.all[i.cl] = s
next
}
file.tmp = paste(path.mattf.tmp,pref, '_cl_', i.cl,'.fasta', sep = '')
file.out = paste(path.mattf.tmp,pref, '_cl_', i.cl,'_out.fasta', sep = '')
writeFastaMy(s, file.tmp)
command <- paste('mafft --op 10 --quiet --ep 0.1  ',file.tmp,' > ',file.out, sep = '')
system(command)
aln.cl = readFastaMy(file.out)
mx.cl = aln2mx(aln.cl)
msaplot(mx.cl)
s.cons.all[i.cl] = nt2seq(mx2cons(mx.cl))
command <- paste('rm ', file.tmp, sep = '')
system(command)
command <- paste('rm ', file.out, sep = '')
system(command)
}
Sys.setenv(PATH = paste("/Users/annaigolkina/miniconda3/envs/bioinf/bin", Sys.getenv("PATH"), sep=":"))
seqs = mx2seq(mx)
path.mattf.tmp = '/Volumes/Samsung_T5/vienn/alignment/new/mafft_tmp/tmp/'
pref = 'tmp4.fasta'
s.cons.all = c()
for(i.cl in 1:max(clusters)){
pokaz('Cluster', i.cl)
s = seqs[clusters == i.cl]
if(sum(clusters == i.cl) == 1){
s.cons.all[i.cl] = s
next
}
file.tmp = paste(path.mattf.tmp,pref, '_cl_', i.cl,'.fasta', sep = '')
file.out = paste(path.mattf.tmp,pref, '_cl_', i.cl,'_out.fasta', sep = '')
writeFastaMy(s, file.tmp)
command <- paste('mafft --op 10 --quiet --ep 0.1  ',file.tmp,' > ',file.out, sep = '')
system(command)
aln.cl = readFastaMy(file.out)
mx.cl = aln2mx(aln.cl)
msaplot(mx.cl)
s.cons.all[i.cl] = nt2seq(mx2cons(mx.cl))
command <- paste('rm ', file.tmp, sep = '')
system(command)
command <- paste('rm ', file.out, sep = '')
system(command)
}
dotplot.s(s.cons.all[1], s.cons.all[2])
dotplot.s(s.cons.all[1], s.cons.all[2], 15, 12)
names(s.cons.all)  = paste('cluster_', 1:length(s.cons.all), sep = '')
writeFastaMy(s.cons.all, file.tmp)
command <- paste('mafft --op 10 --quiet --ep 0.1  ',file.tmp,' > ',file.out, sep = '')
system(command)
file.tmp = paste(path.mattf.tmp,pref, '_cl_cons.fasta', sep = '')
file.out = paste(path.mattf.tmp,pref, '_cl_cons_out.fasta', sep = '')
names(s.cons.all)  = paste('cluster_', 1:length(s.cons.all), sep = '')
writeFastaMy(s.cons.all, file.tmp)
command <- paste('mafft --op 10 --quiet --ep 0.1  ',file.tmp,' > ',file.out, sep = '')
system(command)
aln.cl = readFastaMy(file.out)
mx.cl = aln2mx(aln.cl)
msaplot(mx.cl)
seq2mx(s)
aln2mx(s)
s
aln2mx(s[1])
clusters
i.cl = 1
pokaz('Cluster', i.cl)
s = seqs[clusters == i.cl]
if(sum(clusters == i.cl) == 1){
s.cons.all[i.cl] = s
mx.all[[i.cl]] = aln2mx(s[1])
next
}
file.tmp = paste(path.mattf.tmp,pref, '_cl_', i.cl,'.fasta', sep = '')
file.out = paste(path.mattf.tmp,pref, '_cl_', i.cl,'_out.fasta', sep = '')
writeFastaMy(s, file.tmp)
command <- paste('mafft --op 10 --quiet --ep 0.1  ',file.tmp,' > ',file.out, sep = '')
system(command)
aln.cl = readFastaMy(file.out)
mx.cl = aln2mx(aln.cl)
msaplot(mx.cl)
msadiff(mx.cl)
mx.cl
# Diversity by each position
mx.len = ncol(mx.cl)
mx.cl = toupper(mx.cl)
s.nts = c('A', 'C', 'G', 'T')
pos.profile = matrix(0, nrow = 4, ncol = aln.len, dimnames = list(c(s.nts, NULL)))
# Diversity by each position
mx.len = ncol(mx.cl)
mx.cl = toupper(mx.cl)
s.nts = c('A', 'C', 'G', 'T')
pos.profile = matrix(0, nrow = 4, ncol = mx.len, dimnames = list(c(s.nts, NULL)))
for(s.nt in s.nts){
pos.profile[s.nt,] = colSums(mx.cl == s.nt)
}
pos.variation = (colSums(pos.profile == 0) != 3) * 1
plot(pos.variation)
pos.profile
head(t(pos.profile))
head(t(pos.profile), 100)
sim.cutoff = 0.3
wnd.len = max(round(mx.len * 0.01), 15)
n.mismatch = round(wnd.len * sim.cutoff)
wnd.len
d = pos.variation
d.sum <- d
for (i in 1:(wnd.len - 1)) {
# Сдвигаем вектор
d.shift <- lag(d, n = i, default = 0)
# Суммируем с исходным вектором сумм
d.sum <- d.sum + d.shift
}
d.sum = d.sum[-(1:(wnd.len-1))]
dim(d.sum)
plot(d.sum)
path.base = '../../../'
path.pannagram = paste(path.base, '../pannagram/', sep = '')
source(paste(path.pannagram, 'sim/sim_func.R', sep = ''))
path.base = '../../../'
path.pannagram = paste(path.base, '../pannagram/', sep = '')
source(paste(path.pannagram, 'sim/sim_func.R', sep = ''))
source(paste(path.pannagram, 'sv/graph_refinement.R', sep = ''))
source(paste(path.pannagram, 'utils/utils.R', sep = ''))
source(paste(path.pannagram, 'visualisation/dotplot.R', sep = ''))
source(paste(path.pannagram, 'visualisation/msaplot.R', sep = ''))
source(paste(path.pannagram, 'visualisation/orfplot.R', sep = ''))
source(paste(path.pannagram, 'visualisation/visualisation.R', sep = ''))
invisible(library(ggplot2))
invisible(library(rhdf5))
files.annot = list.files(path.annot, pattern = "genes_v05_\\d+.gff$")
path.annot = paste(path.base, '01_data/04_annotation/02_pannagram/genes_v05/', sep = '')
path.output = paste(path.base, '../01_data/', sep = '')
files.annot = list.files(path.annot, pattern = "genes_v05_\\d+.gff$")
files.annot
(gsub("genes_v05_(\\d+).gff", "\\1", files.annot)
)
accessions = gsub("genes_v05_(\\d+).gff", "\\1", files.annot)
i.acc = 1
gff = read.table(paste(path.annot, files.annot[i.acc], sep = ''), stringsAsFactors = F)
head(gff)
gff = gff[gff$V3 %in% c('genes', 'exons'), ]
gff = read.table(paste(path.annot, files.annot[i.acc], sep = ''), stringsAsFactors = F)
gff = gff[gff$V3 %in% c('gene', 'mRNA'), ]
gff$V9 = sapply(gff$V9, function(s) strsplit(s, '\\.')[[1]][1])
head(gff)
nchar('ID=AT1Gr10000001')
gff$V9 = sapply(gff$V9, function(s) substring(s, 1, 16 ))
head(gff)
gff$V1 = sapply(gff$V1, function(s) strsplit(s, '_')[[1]][1])
gff$V1
gff.all = c()
for(i.acc in 1:length(accessions)){
pokaz('Accession', i.acc)
gff = read.table(paste(path.annot, files.annot[i.acc], sep = ''), stringsAsFactors = F)
gff = gff[gff$V3 %in% c('gene', 'mRNA'), ]
gff$V9 = sapply(gff$V9, function(s) substring(s, 1, 16 ))
gff$V1 = sapply(gff$V1, function(s) strsplit(s, '_')[[1]][1])
gff.all = rbind(gff.all, gff[, c(1,3,9)])
}
gff.tmp = gff.all[gff.all$V3 == 'gene',]
gene.table = as.matrix(table(gff.tmp$V9, gff.tmp$V1))
dim(gene.table)
gff.tmp = gff.all[gff.all$V3 == 'gene',]
gene.table = as.matrix(table(gff.tmp$V9, gff.tmp$V1))
gff.tmp = gff.all[gff.all$V3 == 'mrna',]
mrna.table = as.matrix(table(gff.tmp$V9, gff.tmp$V1))
dim(mrna.table)
gff.tmp = gff.all[gff.all$V3 == 'mRNA',]
mrna.table = as.matrix(table(gff.tmp$V9, gff.tmp$V1))
dim(mrna.table)
length(setdiff(rownames(mrna.table), rownames(gene.table)))
mrna.table = mrna.table[rownames(gene.table),]
if(length(setdiff(colnames(mrna.table), colnames(gene.table))) > 0) stop('Problem with accession names')
mrna.table = mrna.table[,colnames(gene.table)]
if(length(setdiff(rownames(mrna.table), rownames(gene.table))) > 0) stop('Problem with gene names')
if(length(setdiff(colnames(mrna.table), colnames(gene.table))) > 0) stop('Problem with accession names 1')
if(length(setdiff(colnames(gene.table), colnames(mrna.table))) > 0) stop('Problem with accession names 2')
mrna.table = mrna.table[,colnames(gene.table)]
mrna.final = gene.table * 0
mrna.final[rownames(mrna.table),] = mrna.table
mrna.final$freq = rowSums(mrna.final)
gene.table$freq = rowSums(gene.table)
gff.tmp = gff.all[gff.all$V3 == 'gene',]
gene.table = as.matrix(table(gff.tmp$V9, gff.tmp$V1))
gff.tmp = gff.all[gff.all$V3 == 'mRNA',]
mrna.table = as.matrix(table(gff.tmp$V9, gff.tmp$V1))
if(length(setdiff(rownames(mrna.table), rownames(gene.table))) > 0) stop('Problem with gene names')
if(length(setdiff(colnames(mrna.table), colnames(gene.table))) > 0) stop('Problem with accession names 1')
if(length(setdiff(colnames(gene.table), colnames(mrna.table))) > 0) stop('Problem with accession names 2')
# Sorting of accessions
mrna.table = mrna.table[,colnames(gene.table)]
# Constructing mra table to fit the gene table
mrna.final = gene.table * 0
mrna.final = gene.table * 0
mrna.final[rownames(mrna.table),] = mrna.table
rowSums(mrna.final)
max(rowSums(mrna.final))
mrna.final$freq = rowSums(mrna.final)
class(mrna.final)
class(gene.table)
gff.tmp = gff.all[gff.all$V3 == 'gene',]
gene.table = as.matrix(table(gff.tmp$V9, gff.tmp$V1))
gff.tmp = gff.all[gff.all$V3 == 'mRNA',]
mrna.table = as.matrix(table(gff.tmp$V9, gff.tmp$V1))
if(length(setdiff(rownames(mrna.table), rownames(gene.table))) > 0) stop('Problem with gene names')
if(length(setdiff(colnames(mrna.table), colnames(gene.table))) > 0) stop('Problem with accession names 1')
if(length(setdiff(colnames(gene.table), colnames(mrna.table))) > 0) stop('Problem with accession names 2')
# Sorting of accessions
mrna.table = mrna.table[,colnames(gene.table)]
# Constructing mra table to fit the gene table
mrna.final = gene.table * 0
mrna.final[rownames(mrna.table),] = mrna.table
mrna.final <- as.data.frame(mrna.final)
gene.table <- as.data.frame(gene.table)
mrna.final$freq = rowSums(mrna.final)
mrna.final
gff.tmp = gff.all[gff.all$V3 == 'gene',]
gene.table = as.matrix(table(gff.tmp$V9, gff.tmp$V1))
gff.tmp = gff.all[gff.all$V3 == 'mRNA',]
mrna.table = as.matrix(table(gff.tmp$V9, gff.tmp$V1))
dim(gene.table)
gene.table = as.data.frame(as.matrix(table(gff.tmp$V9, gff.tmp$V1)))
dim(gene.table)
gene.table = as.matrix(table(gff.tmp$V9, gff.tmp$V1))
dim(gene.table)
gene.table <- as.matrix(table(gff.tmp$V9, gff.tmp$V1))
# Преобразование матрицы в датафрейм, сохраняя имена столбцов и строки
gene.df <- as.data.frame(gene.table)
dim(gene.df)
gene.df <- data.frame(matrix(data = gene.table, nrow = nrow(gene.table), ncol = ncol(gene.table)))
dim(gene.df)
head(gene.df)
gff.tmp = gff.all[gff.all$V3 == 'gene',]
gene.table = as.matrix(table(gff.tmp$V9, gff.tmp$V1))
gene.table <- data.frame(matrix(data = gene.table, nrow = nrow(gene.table), ncol = ncol(gene.table),
dimnames = list(rownames(gene.table), colnames(gene.table))))
head(gene.table)
gene.table <- data.frame(matrix(data = gene.table, nrow = nrow(gene.table), ncol = ncol(gene.table),
dimnames = list(rownames(gene.table), colnames(gene.table))), check.names = F)
head(gene.table)
files.annot = list.files(path.annot, pattern = "genes_v05_\\d+.gff$")
accessions = gsub("genes_v05_(\\d+).gff", "\\1", files.annot)
if(length(accessions) !=  length(files.annot)) stop('Problem with the format of gff files')
gff.all = c()
for(i.acc in 1:length(accessions)){
pokaz('Accession', i.acc)
gff = read.table(paste(path.annot, files.annot[i.acc], sep = ''), stringsAsFactors = F)
gff = gff[gff$V3 %in% c('gene', 'mRNA'), ]
# gff$V9 = sapply(gff$V9, function(s) substring(s, 1, 16 ))
gff$V9 = sapply(gff$V9, function(s) strsplit(s, '\\.')[[1]][1])
gff$V9 = sapply(gff$V9, function(s) strsplit(s, ';')[[1]][1])
gff$V1 = sapply(gff$V1, function(s) strsplit(s, '_')[[1]][1])
gff.all = rbind(gff.all, gff[, c(1,3,9)])
}
gff.tmp = gff.all[gff.all$V3 == 'gene',]
gene.table = as.data.frame.matrix(table(gff.tmp$V9, gff.tmp$V1))
dim(gene.table)
gff.tmp = gff.all[gff.all$V3 == 'mRNA',]
mrna.table = as.data.frame.matrix(table(gff.tmp$V9, gff.tmp$V1))
class(mrna.table)
if(length(setdiff(rownames(mrna.table), rownames(gene.table))) > 0) stop('Problem with gene names')
if(length(setdiff(colnames(mrna.table), colnames(gene.table))) > 0) stop('Problem with accession names 1')
if(length(setdiff(colnames(gene.table), colnames(mrna.table))) > 0) stop('Problem with accession names 2')
# Sorting of accessions
mrna.table = mrna.table[,colnames(gene.table)]
# Constructing mra table to fit the gene table
mrna.final = gene.table * 0
mrna.final[rownames(mrna.table),] = mrna.table
# mrna.final <- as.data.frame(mrna.final)
# gene.table <- as.data.frame(gene.table)
mrna.final$freq = rowSums(mrna.final)
gene.table$freq = rowSums(gene.table)
head(mrna.final)
min(gene.table$freq)
hist(gene.table$freq)
write.table(gene.table,
paste(path.output, 'genes_v05_freq_loci.txt', sep = ''), quote = F, sep = '\t', row.names = T, col.names = T)
setwd("~/Library/CloudStorage/OneDrive-Personal/vienn/pacbio/1001Gplus_paper/02_analysis/03_annotation/02_scripts")
write.table(gene.table,
paste(path.output, 'genes_v05_freq_loci.txt', sep = ''), quote = F, sep = '\t', row.names = T, col.names = T)
path.output = '../01_data/'
write.table(gene.table,
paste(path.output, 'genes_v05_freq_loci.txt', sep = ''), quote = F, sep = '\t', row.names = T, col.names = T)
write.table(mrna.final,
paste(path.output, 'genes_v05_freq_mrna.txt', sep = ''), quote = F, sep = '\t', row.names = T, col.names = T)
