bl.sv = read.table(bl.file, stringsAsFactors = F)
bl.sv = bl.sv[bl.sv$V1 != bl.sv$V8,]
# remove having TEs
bl.sv = bl.sv[bl.sv$V1 %in% sv.se.no.te, ]
bl.sv = bl.sv[bl.sv$V8 %in% sv.se.no.te, ]
pos.len = 2
sv.new = getGraphFromBlast(bl.res = bl.sv,
i.len.field = pos.len,
sim.cutoff = sim.cutoff,
collapse = F,
refine = F,
return.nest = T,
max.length = 20000)
g.part <- network(sv.new$edges, matrix.type = "edgelist", ignore.eval = FALSE, directed = TRUE)
g.part.names = network.vertex.names(g.part)
set.seed(239)
p <- ggnet2(g.part, label = F, edge.color = "black",
node.size = 1,
# node.size = g.nodes.cnt[b.graph.names],
# color = g.nodes.type[b.graph.names],
# palette = te.cols
) + guides(size = F)
p
sv.prot.init = readRDS(paste(path.work, 'sv_proteins_no_te_blast.rds', sep = ''))
sv.prot.init$name = sapply(sv.prot.init$X1, function(s){
s = paste0(strsplit(s, '\\|')[[1]][1:2], collapse = '|')
return(s)
})
sv.prot = sv.prot.init[sv.prot.init$prot == 1,]
sv.prot[,2] = tolower(sv.prot[,2])
types = c('disease', 'repeat', 'receptor',  'zinc', 'transcriptase', 'reverse', 'transpos')
for(i.type in 1:length(types)){
sv.prot[,types[i.type]] = (grepl(types[i.type], sv.prot[,2])) * 1
}
sv.prot$type = rowSums(sv.prot[,types])
table(sv.prot$type)
sv.memb = data.frame(name = unique(c(sv.new$edges)))
rownames(sv.memb) = sv.memb$name
sv.memb$prot = 'no prot'
sv.memb$prot[sv.memb$name %in% sv.prot.init$name] = 'undefined prot'
sv.memb$prot[sv.memb$name %in% sv.prot$name] = 'defined prot'
for(type in types){
sv.memb$prot[sv.memb$name %in% sv.prot$name[sv.prot[,type] == 1]] = type
}
sv.memb$prot[sv.memb$prot == 'disease'] = 'defined prot'
g.part %v% "colors" = sv.memb[g.part.names, 'prot']
set.seed(239)
p <- ggnet2(g.part, label = F, edge.color = "black",
node.size = 1,
color = "colors",
palette = g.cols,
# mode = "kamadakawai"
) + guides(size = F) + coord_fixed(ratio = 1) +
scale_color_manual(values = g.cols,
breaks = c("transpos","reverse",
"repeat","zinc","receptor", "defined prot", "undefined prot",
"no prot"),
name = 'Protein key-word:') + theme(legend.justification = c(1, 0))
p = p+ theme(legend.key.height = unit(0.5, "cm"))
p
# pdf(paste(path.figures, 'graph_new_all.pdf', sep = ''), width = 6, height = 4)
# print(p)     # Plot 1 --> in the first page of PDF
# dev.off()
#
# cnt = table(g.nodes.prot)
# cnt = c(sum(cnt[c("transpos","reverse","repeat","zinc")]), sum(cnt[c("receptor","defined prot")]),
#         cnt["undefined prot"], cnt["no prot"])
cl.np.prot = which(sv.graphcomp$tag == 'no prot')
sv.graphcomp <- getGraphComponents(sv.new$edges)
cl.np.prot = which(sv.graphcomp$tag == 'no prot')
cl.np.prot = table(sv.graphcomp$membership[sv.graphcomp$membership %in% cl.np.prot])
cl.np.prot = as.numeric(names(cl.np.prot)[cl.np.prot > 2])
cl.np.prot
sv.graphcomp <- getGraphComponents(sv.new$edges)
sv.comp.member = sv.graphcomp$membership
s.tags = c("transpos","reverse","repeat","zinc", "receptor","defined prot", "undefined prot", 'no prot')
s.tags0 = rep('', length(s.tags))
s.tags0[1:4] = 'TE-like'
s.tags0[5:6] = 'Known Proteins'
s.tags0[7] = 'Undef. Proteins'
s.tags0[8] = 'No Proteins'
names(s.tags0) = s.tags
comp.tags = rep('', length(unique(sv.comp.member)))
for(s.tag in s.tags){
tmp.tags = unique(sv.comp.member[sv.memb$name[sv.memb$prot == s.tag]])
comp.tags[tmp.tags][comp.tags[tmp.tags] == ''] = s.tag
}
comp.tags[comp.tags == ''] = 'no prot'
sv.graphcomp$tag = comp.tags
comp.tags = data.frame(table(comp.tags))
colnames(comp.tags) = c('tag1', 'freq')
comp.tags$tag1 = factor(comp.tags$tag1, levels = s.tags)
comp.tags = comp.tags[order(comp.tags$tag1),]
comp.tags$tag0 = s.tags0[comp.tags$tag1]
comp.tags$tag0 = factor(comp.tags$tag0, levels = unique(s.tags0))
y.ticks = tapply(comp.tags$freq, comp.tags$tag0, sum)
y.ticks = y.ticks[!is.na(y.ticks)]
yy = sum(y.ticks) - cumsum(y.ticks) + y.ticks/2
comp.tags$ymin <- c(0, cumsum(comp.tags$freq)[-length(comp.tags$freq)])
comp.tags$ymax <- cumsum(comp.tags$freq)
x.step = rep(0, 8)
n.step = 10
x.step[c(5,7,8)] = n.step
x.step = cumsum(x.step)
comp.tags$ymin = comp.tags$ymin + x.step
comp.tags$ymax = comp.tags$ymax + x.step
y.min = tapply(comp.tags$ymin, comp.tags$tag0, min)
y.max = tapply(comp.tags$ymax, comp.tags$tag0, max)
y.val = (y.max + y.min) / 2
y.cnt = tapply(comp.tags$freq, comp.tags$tag0, sum)
df.text = data.frame(y.min = y.min, y.max = y.max, y.val = y.val, y.cnt = y.cnt, label = names(y.val))
df.text$angles <- 360 - (df.text$y.val / (max(comp.tags$ymax) + n.step)) * 360
df.text$angles[2:3] = 180 + df.text$angles[2:3]
p = ggplot(comp.tags, aes(x = 0, y = freq, fill = tag1)) +
geom_rect(aes(xmin = -0.5, xmax = 0.5, ymin = ymin, ymax = ymax)) +
coord_polar("y", start = 0) +
scale_fill_manual(values = g.cols) + ylim(0, max(comp.tags$ymax) + n.step) +
theme_void() + xlim(-1.5, 0.7) +
geom_text(data=df.text, aes(x = 0.7, y = y.val, label = paste(label, y.cnt, sep = ': ')),
angle = df.text$angles, inherit.aes = FALSE) +
theme(legend.position="none") +
annotate("text", x = -1.5, y = 0, label = paste('Total',sum(comp.tags$freq),'\n connected \ncomponents'))
p
#
# pdf(paste(path.figures, 'graph_new_pie_chart.pdf', sep = ''), width = 3.1, height = 3.1)
# print(p)     # Plot 1 --> in the first page of PDF
# dev.off()
cl.np.prot = which(sv.graphcomp$tag == 'no prot')
cl.np.prot = table(sv.graphcomp$membership[sv.graphcomp$membership %in% cl.np.prot])
cl.np.prot = as.numeric(names(cl.np.prot)[cl.np.prot > 2])
cl.np.prot
sv.graphcomp
names(sv.graphcomp$membership)[sv.graphcomp$membership == 2]
exp = read.table('/Users/annaigolkina/Library/CloudStorage/OneDrive-Personal/vienn/pacbio/1001Gplus_paper/01_data/05_expression/counts.genes_and_SVs.bed', stringsAsFactors = F)
head(exp)
exp = read.table('/Users/annaigolkina/Library/CloudStorage/OneDrive-Personal/vienn/pacbio/1001Gplus_paper/01_data/05_expression/counts.genes_and_SVs.bed', stringsAsFactors = F, header = 1, row.names = 1)
head(exp)
sv.interest = names(sv.graphcomp$membership)[sv.graphcomp$membership == 2]
exp[sv.interest,]
sv.interest = sapply(sv.interest. function(s) strsplit(sv.interest, '\\|')[[1]][1])
sv.interest = sapply(sv.interest, function(s) strsplit(sv.interest, '\\|')[[1]][1])
exp[sv.interest,]
sv.interest
path.methylation = paste(path.base, '01_data/06_methylation/001.bsseq_on_pacbio/003.pacbiov2.1_Based/', sep = '')
path.meth.only = paste(path.base,
'01_data/06_methylation/001.bsseq_on_pacbio/003.pacbiov2.1_Based/methylation_only/',
sep = '')
files.meth = list.files(path.methylation, pattern = "\\.tsv$")
acc.meth = sapply(files.meth, function(s) strsplit(strsplit(s, '_')[[1]][2], '\\.')[[1]][1])
sv.pos.beg = read.table(paste(path.svs, 'svs_all_beg_pos_v03.txt', sep = ''), stringsAsFactors = F, check.names = F)
sv.pos.end = read.table(paste(path.svs, 'svs_all_end_pos_v03.txt', sep = ''), stringsAsFactors = F, check.names = F)
sv.pos.bin = read.table(paste(path.svs, 'svs_se_bin_v03.txt', sep = ''), stringsAsFactors = F, check.names = F)
sv.pos.bin = sv.pos.bin[sv.se$len >= 100,]
rownames(sv.se) = sv.se$gr
sv.se.pres = matrix(0, nrow = nrow(sv.pos.bin), ncol = length(acc.meth),
dimnames = list(rownames(sv.pos.bin), acc.meth))
sv.se.meth = matrix(0, nrow = nrow(sv.pos.bin), ncol = length(acc.meth),
dimnames = list(rownames(sv.pos.bin), acc.meth))
for(acc in acc.meth){
pokaz('Accession', acc)
sv.pos.bin.acc = sv.pos.bin[, acc, drop = F]
sv.pos.bin.acc = sv.pos.bin.acc[sv.pos.bin.acc != 0, ,drop = F]
meth.file = names(acc.meth)[acc.meth == acc]
file.meth.only = paste(path.meth.only, gsub('.tsv', '.1only.rds', meth.file), sep = '')
if(!file.exists(file.meth.only)){
pokaz('Create meth-only files')
meth.value = read.table(paste(path.methylation, meth.file, sep = ''), stringsAsFactors = F)
meth.value = meth.value[meth.value$V7 == 1,]
dim(meth.value)
saveRDS(meth.value, file.meth.only)
} else {
pokaz('Read meth-only files')
meth.value = readRDS(file.meth.only)
}
pos.beg.acc = sv.pos.beg[rownames(sv.pos.bin.acc), acc]
pos.end.acc = sv.pos.end[rownames(sv.pos.bin.acc), acc]
idx.remain = (pos.beg.acc != 0) & (pos.end.acc != 0)
pokaz('Removed zeros', sum(!idx.remain))
sv.pos.bin.acc = sv.pos.bin.acc[idx.remain,,drop = F]
pos.beg.acc = pos.beg.acc[idx.remain]
pos.end.acc = pos.end.acc[idx.remain]
sv.se.pres[rownames(sv.pos.bin.acc), acc] = 1
meth.value$type = 'CHH'
meth.value$type[meth.value$V4 %in% c('CGA', 'CGC', 'CGG', 'CGT')] = 'CG'
meth.value$type[meth.value$V4 %in% c('CAG', 'CCG', 'CTG')] = 'CHG'
len.max = max(max(pos.beg.acc), max(pos.end.acc), meth.value$V2[nrow(meth.value)])
df.meth = data.frame(matrix(0, nrow = length(pos.beg.acc), ncol = 3,
dimnames = list(rownames(sv.pos.bin.acc), c('CG', 'CHG', 'CHH'))))
for(meth.type in colnames(df.meth)){
pos.meth = rep(0, len.max + 100000)
pos.meth[meth.value$V2[meth.value$type == meth.type]] = 1
pokaz('Methilation', meth.type, 'amount:', sum(pos.meth))
for(irow in (1:nrow(df.meth))){
df.meth[irow, meth.type] = sum(pos.meth[pos.beg.acc[irow]:pos.end.acc[irow]])
}
}
df.meth.relative = rowSums(df.meth) / sv.se[rownames(sv.pos.bin.acc),]$len
sv.se.meth[rownames(sv.pos.bin.acc), acc] = df.meth.relative
}
sv.interest = names(sv.graphcomp$membership)[sv.graphcomp$membership == 95]
sv.interest = sapply(sv.interest, function(s) strsplit(sv.interest, '\\|')[[1]][1])
sv.interest
head(sv.se.meth)
sv.se.meth[sv.interest,]
sv.interest = names(sv.graphcomp$membership)[sv.graphcomp$membership == 9]
sv.interest = sapply(sv.interest, function(s) strsplit(sv.interest, '\\|')[[1]][1])
# sv.se.meth
sv.se.meth[sv.interest,]
sv.interest = names(sv.graphcomp$membership)[sv.graphcomp$membership == 24]
sv.interest = sapply(sv.interest, function(s) strsplit(sv.interest, '\\|')[[1]][1])
# sv.se.meth
sv.se.meth[sv.interest,]
sv.interest = names(sv.graphcomp$membership)[sv.graphcomp$membership == 31]
sv.interest = sapply(sv.interest, function(s) strsplit(sv.interest, '\\|')[[1]][1])
# sv.se.meth
sv.se.meth[sv.interest,]
sv.interest = names(sv.graphcomp$membership)[sv.graphcomp$membership == 39]
sv.interest = sapply(sv.interest, function(s) strsplit(sv.interest, '\\|')[[1]][1])
# sv.se.meth
sv.se.meth[sv.interest,]
x = readRDS('/Volumes/Samsung_T5/vienn/snps/snp_all_filt_012.txt')
x = read.table('/Volumes/Samsung_T5/vienn/snps/snp_all_filt_012.txt')
вшь(ч)
dim(x)
sum(x[,1] != x[,2])
gc()
вшь(cep.pos)
dim(cep.pos)
library(cultevo)  #hammingdists
# library(cultevo)  #hammingdists
library(ggplot2)
library(ggtree)
# library(cultevo)  #hammingdists
library(ggplot2)
# library(ggtree)
# library('ggmsa')
library(gridExtra)
library(egg)
# library(cultevo)  #hammingdists
library(ggplot2)
# library(ggtree)
# library('ggmsa')
library(gridExtra)
# library(egg)
path.base = '../../../'
path.data = paste(path.base, '02_analysis/06_snps/01_data/', sep = '')
path.figures = paste(path.base, '02_analysis/06_snps/03_figures/', sep = '')
path.stat = paste(path.base, '01_data_common/04_stat/', sep = '')
file.cen.pos = paste(path.stat, 'cen_pos_fernando.txt', sep = '')
cen.breaks = read.table(file.cen.pos, stringsAsFactors = F, header = 1)
file.cen.pos
setwd("~/Library/CloudStorage/OneDrive-Personal/vienn/pacbio/1001Gplus_paper/02_analysis/06_snps/02_scripts")
invisible(library(ggplot2))
invisible(library(rhdf5))
snps = readRDS('/Volumes/Samsung_T5/vienn/work_snps/snps_all.rds')
dim(snps)
head(snps)
x = snps[,1] != snps[,2]
x[!is.na(x)] = 0
sum(x)
head(x)
sum(is.na(x))
x = snps[,1] != snps[,2]
head(x)
x = (snps[,1] != snps[,2]) *1
x[!is.na(x)] = 0
sum(x)
x[!is.na(x)] = 0
x = (snps[,1] != snps[,2]) *1
x[is.na(x)] = 0
sum(x)
snps = readRDS('/Volumes/Samsung_T5/vienn/work_snps/snps_satur.rds')
dim(snps)
head(snps)
f.snps = '/Volumes/Samsung_T5/vienn/work/snps_pb18_012.012'
f.pos = '/Volumes/Samsung_T5/vienn/work/snps_pb18_012.012.pos'
f.accs = '/Volumes/Samsung_T5/vienn/work/snps_pb18_012.012.indv'
f.snps = '/Volumes/Samsung_T5/vienn/work/snps_pb18_012.012'
f.pos = '/Volumes/Samsung_T5/vienn/work/snps_pb18_012.012.pos'
f.accs = '/Volumes/Samsung_T5/vienn/work/snps_pb18_012.012.indv'
snps = readRDS('/Volumes/Samsung_T5/vienn/snps/snp_all_filt.rds')
dim(snps)
head(snps)
path.work = '../cmp_all/'
path.het = paste(path.work, 'hetero/', sep = '')
file.snp.b = 'out.012'
file.pos.b = 'out.012.pos'
file.ind.b = 'out.012.indv'
file.snp.h = 'hj.out.012'
file.pos.h = 'hj.out.012.pos'
file.ind.h = 'hj.out.012.indv'
files.snp = c(file.snp.b, file.snp.h)
files.pos = c(file.pos.b, file.pos.h)
files.ind = c(file.ind.b, file.ind.h)
file.data.bh = paste(path.work, 'hetero/', 'data_bh.rds', sep = '')
file.exists(file.data.bh)
snps = readRDS('/Volumes/Samsung_T5/vienn/snps/snp_all.rds')
dim(snps)
head(snps)
gc()
path.base = '../../../'
path.pannagram = paste(path.base, '../pannagram/', sep = '')
source(paste(path.pannagram, 'sim/sim_func.R', sep = ''))
source(paste(path.pannagram, 'sv/graph_refinement.R', sep = ''))
source(paste(path.pannagram, 'utils/utils.R', sep = ''))
source(paste(path.pannagram, 'visualisation/dotplot.R', sep = ''))
source(paste(path.pannagram, 'visualisation/msaplot.R', sep = ''))
source(paste(path.pannagram, 'visualisation/orfplot.R', sep = ''))
invisible(library(ggplot2))
invisible(library(rhdf5))
path.base = '../../../'
path.pannagram = paste(path.base, '../pannagram/', sep = '')
source(paste(path.pannagram, 'sim/sim_func.R', sep = ''))
source(paste(path.pannagram, 'sv/graph_refinement.R', sep = ''))
source(paste(path.pannagram, 'utils/utils.R', sep = ''))
source(paste(path.pannagram, 'visualisation/dotplot.R', sep = ''))
source(paste(path.pannagram, 'visualisation/msaplot.R', sep = ''))
source(paste(path.pannagram, 'visualisation/orfplot.R', sep = ''))
invisible(library(ggplot2))
invisible(library(rhdf5))
path.analysis = paste(path.base, '02_analysis/06_snps/', sep = '')
path.work = paste(path.analysis, '01_data/', sep = '')
path.figures = paste(path.analysis, '03_figures/', sep = '')
path.svs = paste(path.base, '01_data/04_annotation/02_pannagram/svs/', sep = '')
path.tair = paste(path.base, '01_data/09_tair10/', sep = '')
path.aln = paste(path.base, '01_data/02_alignment/pannagram_v05/', sep = '')
gr.accs.e <- "accs/"
gr.accs.b <- "/accs"
gr.break.e = 'break/'
gr.break.b = '/break'
groups = h5ls(file.comb)
i.chr = 1
file.comb = paste(path.aln, 'v_',i.chr,'_',i.chr,'_ref_0.h5', sep = '')
groups = h5ls(file.comb)
groups = h5ls(file.comb)
accessions = groups$name[groups$group == gr.accs.b]
path.genomes = paste(path.base, '01_data/01_assembly/fasta/', sep = '')
v1 = h5read(file.comb, paste(gr.accs.e, acc1, sep = ''))
acc1 = accessions[1]
acc2 = accessions[2]
v1 = h5read(file.comb, paste(gr.accs.e, acc1, sep = ''))
v2 = h5read(file.comb, paste(gr.accs.e, acc2, sep = ''))
seq1 = readFastaMy(paste(path.genomes, acc1, '.fasta', sep = ''))
seq2 = readFastaMy(paste(path.genomes, acc2, '.fasta', sep = ''))
v = cbind(v1, v2)
v = v[rowSums(v == 0) == 0,]
dim(v)
chr1 = seq2nt(seq1[i.chr])
chr2 = seq2nt(seq2[i.chr])
s = cbind(chr1[abs(v[,1])], chr2[abs(v[,2])])
s[v[,1] < 0 ,1] = justCompl(s[v[,1] < 0 ,1])
s[v[,1] < 0 ,1]
sum(v[,1])
v = v[rowSums(is.na(v)) == 0,]
dim(v)
s = cbind(chr1[abs(v[,1])], chr2[abs(v[,2])])
s[v[,1] < 0 ,1] = justCompl(s[v[,1] < 0 ,1])
v[,1] < 0
s[v[,1] < 0 ,1]
if(sum(v[,1] < 0) > 0){
s[v[,1] < 0 ,1] = justCompl(s[v[,1] < 0 ,1])
}
if(sum(v[,2] < 0) > 0){
s[v[,2] < 0 ,2] = justCompl(s[v[,2] < 0 ,2])
}
head(s)
sum(s[,1] != s[,2])
diff.chr = list()
for(i.chr in 1:5){
diff.acc = c()
file.comb = paste(path.aln, 'v_',i.chr,'_',i.chr,'_ref_0.h5', sep = '')
groups = h5ls(file.comb)
accessions = groups$name[groups$group == gr.accs.b]
combinations <- expand.grid(accessions, accessions)
for (i in 1:nrow(combinations)) {
acc1 <- combinations[i, 1]
acc2 <- combinations[i, 2]
pokaz('Accessions', acc1, acc2)
v1 = h5read(file.comb, paste(gr.accs.e, acc1, sep = ''))
v2 = h5read(file.comb, paste(gr.accs.e, acc2, sep = ''))
seq1 = readFastaMy(paste(path.genomes, acc1, '.fasta', sep = ''))
seq2 = readFastaMy(paste(path.genomes, acc2, '.fasta', sep = ''))
chr1 = seq2nt(seq1[i.chr])
chr2 = seq2nt(seq2[i.chr])
v = cbind(v1, v2)
v = v[rowSums(v == 0) == 0,]
v = v[rowSums(is.na(v)) == 0,]
dim(v)
s = cbind(chr1[abs(v[,1])], chr2[abs(v[,2])])
if(sum(v[,1] < 0) > 0){
s[v[,1] < 0 ,1] = justCompl(s[v[,1] < 0 ,1])
}
if(sum(v[,2] < 0) > 0){
s[v[,2] < 0 ,2] = justCompl(s[v[,2] < 0 ,2])
}
diff.acc = rbind(diff.acc, c(acc1, acc2, sum(s[,1] != s[,2])))
}
diff.chr[[i.chr]] = diff.acc
}
diff.acc = c()
# Define accession names and combinations to iterate
i.chr = 1
file.comb = paste(path.aln, 'v_',i.chr,'_',i.chr,'_ref_0.h5', sep = '')
groups = h5ls(file.comb)
accessions = groups$name[groups$group == gr.accs.b]
combinations <- expand.grid(accessions, accessions)
for (i in 1:nrow(combinations)) {
acc1 <- combinations[i, 1]
acc2 <- combinations[i, 2]
pokaz('Accessions', acc1, acc2)
# Read genomes
seq1 = readFastaMy(paste(path.genomes, acc1, '.fasta', sep = ''))
seq2 = readFastaMy(paste(path.genomes, acc2, '.fasta', sep = ''))
for(i.chr in 1:5){
file.comb = paste(path.aln, 'v_',i.chr,'_',i.chr,'_ref_0.h5', sep = '')
v1 = h5read(file.comb, paste(gr.accs.e, acc1, sep = ''))
v2 = h5read(file.comb, paste(gr.accs.e, acc2, sep = ''))
chr1 = seq2nt(seq1[i.chr])
chr2 = seq2nt(seq2[i.chr])
v = cbind(v1, v2)
v = v[rowSums(v == 0) == 0,]
v = v[rowSums(is.na(v)) == 0,]
dim(v)
s = cbind(chr1[abs(v[,1])], chr2[abs(v[,2])])
if(sum(v[,1] < 0) > 0){
s[v[,1] < 0 ,1] = justCompl(s[v[,1] < 0 ,1])
}
if(sum(v[,2] < 0) > 0){
s[v[,2] < 0 ,2] = justCompl(s[v[,2] < 0 ,2])
}
d = sum(s[,1] != s[,2])
pokaz('Chr', i.chr, d)
diff.acc = rbind(diff.acc, c(acc1, acc2, i.chr, d))
}
}
combn(accessions, 2)
combinations
combinations <- t(combn(accessions, 2))
combinations
diff.acc = c()
# Define accession names and combinations to iterate
i.chr = 1
file.comb = paste(path.aln, 'v_',i.chr,'_',i.chr,'_ref_0.h5', sep = '')
groups = h5ls(file.comb)
accessions = groups$name[groups$group == gr.accs.b]
combinations <- t(combn(accessions, 2))
for (i in 1:nrow(combinations)) {
acc1 <- combinations[i, 1]
acc2 <- combinations[i, 2]
pokaz('Accessions', acc1, acc2)
# Read genomes
seq1 = readFastaMy(paste(path.genomes, acc1, '.fasta', sep = ''))
seq2 = readFastaMy(paste(path.genomes, acc2, '.fasta', sep = ''))
for(i.chr in 1:5){
file.comb = paste(path.aln, 'v_',i.chr,'_',i.chr,'_ref_0.h5', sep = '')
v1 = h5read(file.comb, paste(gr.accs.e, acc1, sep = ''))
v2 = h5read(file.comb, paste(gr.accs.e, acc2, sep = ''))
chr1 = seq2nt(seq1[i.chr])
chr2 = seq2nt(seq2[i.chr])
v = cbind(v1, v2)
v = v[rowSums(v == 0) == 0,]
v = v[rowSums(is.na(v)) == 0,]
dim(v)
s = cbind(chr1[abs(v[,1])], chr2[abs(v[,2])])
if(sum(v[,1] < 0) > 0){
s[v[,1] < 0 ,1] = justCompl(s[v[,1] < 0 ,1])
}
if(sum(v[,2] < 0) > 0){
s[v[,2] < 0 ,2] = justCompl(s[v[,2] < 0 ,2])
}
d = sum(s[,1] != s[,2])
pokaz('Chr', i.chr, d)
diff.acc = rbind(diff.acc, c(acc1, acc2, i.chr, d))
}
}
s.list = list()
for(i.chr in 1:5){
s.list[[i.chr]] = list()
}
s.list
for (acc in accessions) {
pokaz('Accessions', acc)
# Read genomes
seq = readFastaMy(paste(path.genomes, acc, '.fasta', sep = ''))
for(i.chr in 1:5){
file.comb = paste(path.aln, 'v_',i.chr,'_',i.chr,'_ref_0.h5', sep = '')
v = h5read(file.comb, paste(gr.accs.e, acc, sep = ''))
s.chr = seq2nt(seq[i.chr])
s = rep('-', length(v))
idx.ok = which((!is.na(v)) & (v != 0))
s[idx.ok] = s.chr[abs(v[idx.ok])]
s.list[[i.chr]]$acc = s
}
}
s.list = list()
for(i.chr in 1:5){
s.list[[i.chr]] = list()
}
for (acc in accessions) {
pokaz('Accessions', acc)
# Read genomes
seq = readFastaMy(paste(path.genomes, acc, '.fasta', sep = ''))
for(i.chr in 1:5){
file.comb = paste(path.aln, 'v_',i.chr,'_',i.chr,'_ref_0.h5', sep = '')
v = h5read(file.comb, paste(gr.accs.e, acc, sep = ''))
s.chr = seq2nt(seq[i.chr])
s = rep('-', length(v))
idx.ok = which((!is.na(v)) & (v != 0))
s[idx.ok] = s.chr[abs(v[idx.ok])]
s.list[[i.chr]][[acc]] = s
}
}
