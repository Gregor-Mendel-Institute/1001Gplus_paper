#            value = sv.stat.all$len.core,
#            type = 'core'),
data.frame(n.acc = sv.stat.all$n.acc,
value = sv.stat.all$len.pan,
type = 'pan'))
df2$source = 'Mobilome'
df3 = rbind(data.frame(n.acc = genome.stat.all$n.acc,
value = genome.stat.all$len.pan,
type = 'pan'),
data.frame(n.acc = genome.stat.all$n.acc,
value = genome.stat.all$len.core,
type = 'core'))
df3$source = 'Genome'
df = rbind(df1, df2)
df = rbind(df, df3)
df$init = df$value
norm.flag = T
norm.mode = 2
if (norm.flag) {
for (s.source in unique(df$source)) {
for (s.type in c('pan', 'core')) {
idx.tmp <- (df$source == s.source) & (df$type == s.type)
df.tmp <- df[idx.tmp,]
if (s.type == 'core') {
df.tmp$value <- (-1) * df.tmp$value
}
if (norm.mode == 1) {
m1 <- mean(df.tmp$value[df.tmp$n.acc == 2])
m2 <- mean(df.tmp$value[df.tmp$n.acc == 27])
df.tmp$value <- (df.tmp$value - m1) / (m2 - m1)
} else {
m <- mean(df.tmp$value[df.tmp$n.acc == 2])
df.tmp$value <- df.tmp$value - m
}
if (s.type == 'core') {
df.tmp$value <- (-1) * df.tmp$value
df.tmp$value <- df.tmp$value
}
df[idx.tmp,] <- df.tmp
}
}
}
df$type = factor(df$type, levels = c('pan', 'core'))
df$comb = paste(df$source, df$type, sep = ':')
highlight_points <- df %>%
filter(n.acc %in% c(2, 27)) %>%
group_by(comb, n.acc) %>%
summarize(mean = mean(init), value = mean(value), type = unique(type),
source = unique(source), .groups = 'drop')
highlight_points$label = paste(round(highlight_points$mean / 1000000, 1), 'M', sep = '')
satur.cols = c("Genes"='#57A6A1',  "Mobilome"  ='#898B8A',
"Genome"='#D2649A')
p = ggplot(df, aes(x = n.acc, y = value, color = source, group = source)) +
# geom_jitter(alpha = 0.2, size = 1, width = 0.1) +
scale_color_manual(values=satur.cols, name = NULL) +
stat_summary(fun = mean, geom = "line", aes(group = comb), size = 1) +
theme_bw() +
ylab('Change in length (bp)') + xlab('Number of genomes') +
# scale_x_log10()  +
# scale_y_log10()  +
theme(legend.position = "bottom")
p
#
# p + facet_grid(rows = vars(type))
#
p1 = p + scale_x_log10() + scale_y_log10()
p1
df1 = rbind(data.frame(n.acc = loci.stat.all$n.acc,
value = loci.stat.all$len.pan,
type = 'pan'),
data.frame(n.acc = loci.stat.all$n.acc,
value = loci.stat.all$len.core,
type = 'core'))
df1$source = 'Genes'
df2 = rbind(
# data.frame(n.acc = sv.stat.all$n.acc,
#            value = sv.stat.all$len.core,
#            type = 'core'),
data.frame(n.acc = sv.stat.all$n.acc,
value = sv.stat.all$len.pan,
type = 'pan'))
df2$source = 'Mobilome'
df3 = rbind(data.frame(n.acc = genome.stat.all$n.acc,
value = genome.stat.all$len.pan,
type = 'pan'),
data.frame(n.acc = genome.stat.all$n.acc,
value = genome.stat.all$len.core,
type = 'core'))
df3$source = 'Genome'
df = rbind(df1, df2)
df = rbind(df, df3)
df$init = df$value
norm.flag = T
norm.mode = 2
if (norm.flag) {
for (s.source in unique(df$source)) {
for (s.type in c('pan', 'core')) {
idx.tmp <- (df$source == s.source) & (df$type == s.type)
df.tmp <- df[idx.tmp,]
if (s.type == 'core') {
df.tmp$value <- (-1) * df.tmp$value
}
if (norm.mode == 1) {
m1 <- mean(df.tmp$value[df.tmp$n.acc == 2])
m2 <- mean(df.tmp$value[df.tmp$n.acc == 27])
df.tmp$value <- (df.tmp$value - m1) / (m2 - m1)
} else {
m <- mean(df.tmp$value[df.tmp$n.acc == 2])
df.tmp$value <- df.tmp$value - m
}
if (s.type == 'core') {
df.tmp$value <- (-1) * df.tmp$value
df.tmp$value <- df.tmp$value
}
df[idx.tmp,] <- df.tmp
}
}
}
df$type = factor(df$type, levels = c('pan', 'core'))
df$comb = paste(df$source, df$type, sep = ':')
highlight_points <- df %>%
filter(n.acc %in% c(2, 27)) %>%
group_by(comb, n.acc) %>%
summarize(mean = mean(init), value = mean(value), type = unique(type),
source = unique(source), .groups = 'drop')
highlight_points$label = paste(round(highlight_points$mean / 1000000, 1), 'M', sep = '')
df1 = rbind(data.frame(n.acc = loci.stat.all$n.acc,
value = loci.stat.all$len.pan,
type = 'pan'),
data.frame(n.acc = loci.stat.all$n.acc,
value = loci.stat.all$len.core,
type = 'core'))
df1$source = 'Genes'
df2 = rbind(
# data.frame(n.acc = sv.stat.all$n.acc,
#            value = sv.stat.all$len.core,
#            type = 'core'),
data.frame(n.acc = sv.stat.all$n.acc,
value = sv.stat.all$len.pan,
type = 'pan'))
df2$source = 'Mobilome'
df3 = rbind(data.frame(n.acc = genome.stat.all$n.acc,
value = genome.stat.all$len.pan,
type = 'pan'),
data.frame(n.acc = genome.stat.all$n.acc,
value = genome.stat.all$len.core,
type = 'core'))
df3$source = 'Genome'
df = rbind(df1, df2)
df = rbind(df, df3)
df$init = df$value
norm.flag = T
norm.mode = 1
if (norm.flag) {
for (s.source in unique(df$source)) {
for (s.type in c('pan', 'core')) {
idx.tmp <- (df$source == s.source) & (df$type == s.type)
df.tmp <- df[idx.tmp,]
if (s.type == 'core') {
df.tmp$value <- (-1) * df.tmp$value
}
if (norm.mode == 1) {
m1 <- mean(df.tmp$value[df.tmp$n.acc == 2])
m2 <- mean(df.tmp$value[df.tmp$n.acc == 27])
df.tmp$value <- (df.tmp$value - m1) / (m2 - m1)
} else {
m <- mean(df.tmp$value[df.tmp$n.acc == 2])
df.tmp$value <- df.tmp$value - m
}
if (s.type == 'core') {
df.tmp$value <- (-1) * df.tmp$value
df.tmp$value <- df.tmp$value
}
df[idx.tmp,] <- df.tmp
}
}
}
df$type = factor(df$type, levels = c('pan', 'core'))
df$comb = paste(df$source, df$type, sep = ':')
highlight_points <- df %>%
filter(n.acc %in% c(2, 27)) %>%
group_by(comb, n.acc) %>%
summarize(mean = mean(init), value = mean(value), type = unique(type),
source = unique(source), .groups = 'drop')
highlight_points$label = paste(round(highlight_points$mean / 1000000, 1), 'M', sep = '')
satur.cols = c("Genes"='#57A6A1',  "Mobilome"  ='#898B8A',
"Genome"='#D2649A')
p = ggplot(df, aes(x = n.acc, y = value, color = source, group = source)) +
# geom_jitter(alpha = 0.2, size = 1, width = 0.1) +
scale_color_manual(values=satur.cols, name = NULL) +
stat_summary(fun = mean, geom = "line", aes(group = comb), size = 1) +
theme_bw() +
ylab('Change in length (bp)') + xlab('Number of genomes') +
# scale_x_log10()  +
# scale_y_log10()  +
theme(legend.position = "bottom")
p
df1 = rbind(data.frame(n.acc = loci.stat.all$n.acc,
value = loci.stat.all$len.pan,
type = 'pan'),
data.frame(n.acc = loci.stat.all$n.acc,
value = loci.stat.all$len.core,
type = 'core'))
df1$source = 'Genes'
df2 = rbind(
# data.frame(n.acc = sv.stat.all$n.acc,
#            value = sv.stat.all$len.core,
#            type = 'core'),
data.frame(n.acc = sv.stat.all$n.acc,
value = sv.stat.all$len.pan,
type = 'pan'))
df2$source = 'Mobilome'
df3 = rbind(data.frame(n.acc = genome.stat.all$n.acc,
value = genome.stat.all$len.pan,
type = 'pan'),
data.frame(n.acc = genome.stat.all$n.acc,
value = genome.stat.all$len.core,
type = 'core'))
df3$source = 'Genome'
df = rbind(df1, df2)
df = rbind(df, df3)
df$init = df$value
norm.flag = T
norm.mode = 2
if (norm.flag) {
for (s.source in unique(df$source)) {
for (s.type in c('pan', 'core')) {
idx.tmp <- (df$source == s.source) & (df$type == s.type)
df.tmp <- df[idx.tmp,]
if (s.type == 'core') {
df.tmp$value <- (-1) * df.tmp$value
}
if (norm.mode == 1) {
m1 <- mean(df.tmp$value[df.tmp$n.acc == 2])
m2 <- mean(df.tmp$value[df.tmp$n.acc == 27])
df.tmp$value <- (df.tmp$value - m1) / (m2 - m1)
} else {
m <- mean(df.tmp$value[df.tmp$n.acc == 2])
df.tmp$value <- df.tmp$value - m
}
if (s.type == 'core') {
df.tmp$value <- (-1) * df.tmp$value
df.tmp$value <- df.tmp$value
}
df[idx.tmp,] <- df.tmp
}
}
}
df$type = factor(df$type, levels = c('pan', 'core'))
df$comb = paste(df$source, df$type, sep = ':')
highlight_points <- df %>%
filter(n.acc %in% c(2, 27)) %>%
group_by(comb, n.acc) %>%
summarize(mean = mean(init), value = mean(value), type = unique(type),
source = unique(source), .groups = 'drop')
highlight_points$label = paste(round(highlight_points$mean / 1000000, 1), 'M', sep = '')
satur.cols = c("Genes"='#57A6A1',  "Mobilome"  ='#898B8A',
"Genome"='#D2649A')
p = ggplot(df, aes(x = n.acc, y = value, color = source, group = source)) +
# geom_jitter(alpha = 0.2, size = 1, width = 0.1) +
scale_color_manual(values=satur.cols, name = NULL) +
stat_summary(fun = mean, geom = "line", aes(group = comb), size = 1) +
theme_bw() +
ylab('Change in length (bp)') + xlab('Number of genomes') +
# scale_x_log10()  +
# scale_y_log10()  +
theme(legend.position = "bottom")
p
p1 = p + scale_x_log10()
p1
p1 = p + scale_x_log10() + scale_y_log10()
p1
df1 = rbind(data.frame(n.acc = loci.stat.all$n.acc,
value = loci.stat.all$len.pan,
type = 'pan'),
data.frame(n.acc = loci.stat.all$n.acc,
value = loci.stat.all$len.core,
type = 'core'))
df1$source = 'Genes'
df2 = rbind(
# data.frame(n.acc = sv.stat.all$n.acc,
#            value = sv.stat.all$len.core,
#            type = 'core'),
data.frame(n.acc = sv.stat.all$n.acc,
value = sv.stat.all$len.pan,
type = 'pan'))
df2$source = 'Mobilome'
df3 = rbind(data.frame(n.acc = genome.stat.all$n.acc,
value = genome.stat.all$len.pan,
type = 'pan'),
data.frame(n.acc = genome.stat.all$n.acc,
value = genome.stat.all$len.core,
type = 'core'))
df3$source = 'Genome'
df = rbind(df1, df2)
df = rbind(df, df3)
df$init = df$value
norm.flag = F
norm.mode = 2
if (norm.flag) {
for (s.source in unique(df$source)) {
for (s.type in c('pan', 'core')) {
idx.tmp <- (df$source == s.source) & (df$type == s.type)
df.tmp <- df[idx.tmp,]
if (s.type == 'core') {
df.tmp$value <- (-1) * df.tmp$value
}
if (norm.mode == 1) {
m1 <- mean(df.tmp$value[df.tmp$n.acc == 2])
m2 <- mean(df.tmp$value[df.tmp$n.acc == 27])
df.tmp$value <- (df.tmp$value - m1) / (m2 - m1)
} else {
m <- mean(df.tmp$value[df.tmp$n.acc == 2])
df.tmp$value <- df.tmp$value - m
}
if (s.type == 'core') {
df.tmp$value <- (-1) * df.tmp$value
df.tmp$value <- df.tmp$value
}
df[idx.tmp,] <- df.tmp
}
}
}
df$type = factor(df$type, levels = c('pan', 'core'))
df$comb = paste(df$source, df$type, sep = ':')
highlight_points <- df %>%
filter(n.acc %in% c(2, 27)) %>%
group_by(comb, n.acc) %>%
summarize(mean = mean(init), value = mean(value), type = unique(type),
source = unique(source), .groups = 'drop')
highlight_points$label = paste(round(highlight_points$mean / 1000000, 1), 'M', sep = '')
satur.cols = c("Genes"='#57A6A1',  "Mobilome"  ='#898B8A',
"Genome"='#D2649A')
p = ggplot(df, aes(x = n.acc, y = value, color = source, group = source)) +
# geom_jitter(alpha = 0.2, size = 1, width = 0.1) +
scale_color_manual(values=satur.cols, name = NULL) +
stat_summary(fun = mean, geom = "line", aes(group = comb), size = 1) +
theme_bw() +
ylab('Change in length (bp)') + xlab('Number of genomes') +
# scale_x_log10()  +
# scale_y_log10()  +
theme(legend.position = "bottom")
p
#
# p + facet_grid(rows = vars(type))
#
p1 = p + scale_x_log10() + scale_y_log10()
p1
p2 = p1 +  facet_grid(rows = vars(source), scales = "free_y", space = "free_y")
#
#
pdf(paste(path.figures, 'p_logx.pdf', sep = ''), width = 5, height = 20)
print( p2)     # Plot 1 --> in the first page of PDF
dev.off()
p.print = p + facet_grid(rows = vars(type), scales = "free_y", space = "free_y",
labeller = labeller(type = c('pan' = 'Pan', 'core' = 'Core'))) +
theme(strip.background = element_rect(fill = "white"),
strip.text = element_text(color = "black"))
if(!norm.flag){
p.print = p.print + ylab('Unnormalised length')
file.p.print = 'satur_all_init.pdf'
} else if(norm.mode == 1){
p.print = p.print + ylab('Normalised length')
file.p.print = 'satur_all_norm.pdf'
} else if(norm.mode == 2){
file.p.print = 'satur_all_change.pdf'
}
pdf(paste(path.figures, file.p.print, sep = ''), width = 5, height = 4)
print( p.print)     # Plot 1 --> in the first page of PDF
dev.off()
p2 <- p + geom_text_repel(data = highlight_points, aes(x = n.acc, y = value, label = label, color = source),
vjust = -1, hjust = 1,direction = "y",
size = 3, inherit.aes = F, show.legend = FALSE)
sclae.step = 10^7
custom_labels <- function(x) {
paste0(x / sclae.step * 10, "M")
}
p2 = p2 + xlim(c(-0, 27)) +
facet_grid(rows = vars(type), scales = "free_y", space = "free_y",
labeller = labeller(type = c('pan' = 'Pan', 'core' = 'Core'))) +
theme(strip.background = element_rect(fill = "white"),
strip.text = element_text(color = "black")) +
scale_y_continuous(breaks = seq(-10 * sclae.step, 20 * sclae.step, by = sclae.step),
labels = custom_labels)
p2
fitPowerLaw <- function(df.tmp) {
if(mean(df.tmp$value) < 0){
df.tmp$value = (-1) * df.tmp$value
a.sign = -1
} else {
a.sign = +1
}
df.tmp$value = df.tmp$value - df.tmp$value[df.tmp$n.acc == 2]
df.tmp$n.acc = df.tmp$n.acc - 2
df.tmp = df.tmp[df.tmp$n.acc != 0,]
# model <- lm(log(value) ~ log(n.acc), data = df.tmp)
#
# coefs <- coef(model)
# return(data.frame(
#   comb = unique(df.tmp$comb),
#   a = exp(coefs[1]) * a.sign,
#   b = coefs[2]
# ))
model <- lm(value ~ log(n.acc) + n.acc, data = df.tmp)
coefs <- coef(model)
return(data.frame(
comb = unique(df.tmp$comb),
a = coefs[2],
b = coefs[3]
))
}
mean_values <- df %>%
group_by(comb, n.acc) %>%
summarise(value = mean(value), type = unique(type),
source = unique(source), .groups = 'drop')
# Apply approximation for every comb
fits <- mean_values %>% group_by(comb) %>% do(fitPowerLaw(.))
fits$a.lab = paste0(round(fits$a / sclae.step * 10,1), "M", sep = '')
fits$b.lab = round(fits$b, 2)
fits$lab = paste('a=', fits$a.lab, ', p=', fits$b.lab, sep = '')
#
fits = cbind(fits, mean_values[mean_values$n.acc == 15, c('type', 'value', 'n.acc', 'source')])
p3 = p2 + geom_text(data = fits, aes(x = n.acc, y = value,
# color=source,
label = lab),
# parse = TRUE,
color = 'black',
vjust = 1,
# hjust = 1,direction = "y",
size = 3, inherit.aes = F, show.legend = FALSE)
p3
text.data = data.frame(x = 0, y = Inf,
type = factor(c('pan', 'core'), levels = c('pan', 'core')),
label = c("Approximation: ax^p", ''),
source = 'Genome')
p4 = p3 + geom_text(data = text.data, aes(x = x, y = y, label = label),
hjust = 0, vjust = 2, size = 4,
color = "black",
parse = TRUE)
p4
pdf(paste(path.figures, 'satur_all_power.pdf', sep = ''), width = 5, height = 4)
print(p4)     # Plot 1 --> in the first page of PDF
dev.off()
fits
fits$a / fits$a[4]
fits$a / fits$b
fitPowerLaw <- function(df.tmp) {
if(mean(df.tmp$value) < 0){
df.tmp$value = (-1) * df.tmp$value
a.sign = -1
} else {
a.sign = +1
}
df.tmp$value = df.tmp$value - df.tmp$value[df.tmp$n.acc == 2]
df.tmp$n.acc = df.tmp$n.acc - 2
df.tmp = df.tmp[df.tmp$n.acc != 0,]
# model <- lm(log(value) ~ log(n.acc), data = df.tmp)
#
# coefs <- coef(model)
# return(data.frame(
#   comb = unique(df.tmp$comb),
#   a = exp(coefs[1]) * a.sign,
#   b = coefs[2]
# ))
model <- lm(value ~ n.acc + log(n.acc), data = df.tmp)
coefs <- coef(model)
return(data.frame(
comb = unique(df.tmp$comb),
a = coefs[2],
b = coefs[3]
))
}
mean_values <- df %>%
group_by(comb, n.acc) %>%
summarise(value = mean(value), type = unique(type),
source = unique(source), .groups = 'drop')
# Apply approximation for every comb
fits <- mean_values %>% group_by(comb) %>% do(fitPowerLaw(.))
fits$a.lab = paste0(round(fits$a / sclae.step * 10,1), "M", sep = '')
fits$b.lab = round(fits$b, 2)
fits$lab = paste('a=', fits$a.lab, ', p=', fits$b.lab, sep = '')
#
fits = cbind(fits, mean_values[mean_values$n.acc == 15, c('type', 'value', 'n.acc', 'source')])
p3 = p2 + geom_text(data = fits, aes(x = n.acc, y = value,
# color=source,
label = lab),
# parse = TRUE,
color = 'black',
vjust = 1,
# hjust = 1,direction = "y",
size = 3, inherit.aes = F, show.legend = FALSE)
p3
text.data = data.frame(x = 0, y = Inf,
type = factor(c('pan', 'core'), levels = c('pan', 'core')),
label = c("Approximation: ax^p", ''),
source = 'Genome')
p4 = p3 + geom_text(data = text.data, aes(x = x, y = y, label = label),
hjust = 0, vjust = 2, size = 4,
color = "black",
parse = TRUE)
p4
pdf(paste(path.figures, 'satur_all_power.pdf', sep = ''), width = 5, height = 4)
print(p4)     # Plot 1 --> in the first page of PDF
dev.off()
fits$b / fits$a
fits$log.ratio = fits$b / fits$a
fits
fits[,c(1:3,ncol(fits))]
fits[fits$type == 'pan',c(1:3,ncol(fits))]
coefs
model
summary(model)
