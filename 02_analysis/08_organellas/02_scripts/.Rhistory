cen.pos$start3[i.chr]
cen.pos$end3[i.chr]
n.cen = c()
n.per = c()
for(i.chr in 1:5){
gff.tmp = genes.gff[genes.gff$V1 == paste('Chr', i.chr, sep = ''),]
n.cen[i.chr] = sum((gff.tmp$V5 >= cen.pos$start[i.chr]) & (gff.tmp$V4 <= cen.pos$stop[i.chr]))
n.per[i.chr] = sum((gff.tmp$V5 >= cen.pos$start3[i.chr]) & (gff.tmp$V4 <= cen.pos$stop3[i.chr]))
}
n.cen
n.per
sum(n.cen) / nrow(genes.gff)
sum(n.per) / nrow(genes.gff)
library(ggplot2)
path.organellas = '../01_data/'
path.figures = '../03_figures/'
path.proj = '../../../'
path.tair = paste(path.proj, '01_data_common/01_tair10/', sep ='')
path.annot = paste(path.proj, '01_data_common/03_annot_repeat/', sep = '')
path.aln = paste(path.proj, '01_data_common/04_alignment/', sep = '')
path_genomes = paste(path.proj,'02_analysis/02_alignment/pb_chromosomes/', sep = '')
stop('Define ID for some of the insertions - by hands!')
file.org.idx = paste(path.organellas, 'organellas_pan_ids.txt', sep = '')
message(paste('Resulting file', file.org.idx))
source('../../05_synteny/02_scripts/func_visualise_synteny.R')
path.syn.figures = '../../05_synteny/03_figures/'
df.org = read.table(file.org.idx, stringsAsFactors = F, header = 1)
df.org
df.org
table(df.org$id_new)
table(table(df.org$id_new))
length(unique(df.org$id_new))
message(paste('Total number of insertions:' length(unique(df.org$id_new)), sep = ''))
message(paste('Total number of insertions:', length(unique(df.org$id_new)), sep = ''))
cnt.occure
cnt.occure = table(table(df.org$id_new))
cnt.occure
message(paste('Number of singletons: ', cnt.occure[names(cnt.occure) == '1'], sep = ''))
message(paste('Number of doubletons: ', cnt.occure[names(cnt.occure) == '2'], sep = ''))
table(df.org$id_new)
head(df.org)
df.orf.cnt = tapply(df.org$id_new, df.org$id_new, function(x) length(unique(x)))
df.orf.cnt
df.orf.cnt = tapply(df.org$id_new, df.org$id_new, length)
df.orf.cnt
sum(df.orf.cnt)
nrow(df.org)
df.orf.cnt = data.frame(cnt = tapply(df.org$id_new, df.org$id_new, length),
len = round(tapply(df.org$len, df.org$id_new, mean)))
df.orf.cnt
df.orf.cnt$cnt = factor(df.orf.cnt$cnt, levels = 1:max(df.orf.cnt$cnt))
ggplot(df.orf.cnt, aes(x = cnt, y = len)) +
geom_jitter(width = 0.2, height = 0) +
theme_minimal()
ggplot(df.orf.cnt, aes(x = cnt, y = len)) +
geom_jitter(width = 0.2, height = 0) +
theme_minimal() + scale_y_log10()
ggplot(df.orf.cnt, aes(x = cnt, y = len)) +
geom_jitter(width = 0.2, height = 0) +
theme_minimal() + scale_y_log10() + scale_x_continuous(breaks = 1:20, limits = c(1, 20))
df.orf.cnt$cnt_numeric <- as.numeric(as.character(df.orf.cnt$cnt))
ggplot(df.orf.cnt, aes(x = cnt_numeric, y = len)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
scale_x_continuous(breaks = 1:20, limits = c(1, 20)) +
scale_y_log10() +
theme_minimal()
df.orf.cnt$cnt_numeric <- as.numeric(as.character(df.orf.cnt$cnt))
ggplot(df.orf.cnt, aes(x = cnt_numeric, y = len)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
scale_x_continuous(breaks = 1:20, limits = c(1, 20)) +
scale_y_log10() +
theme_minimal()
ggplot(df.orf.cnt, aes(x = cnt_numeric, y = len)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
scale_x_continuous(breaks = 1:20, limits = c(1, 20)) +
scale_y_log10() +
theme_minimal()
ggplot(df.orf.cnt, aes(x = cnt, y = len)) +
geom_jitter(width = 0.2, height = 0) +
theme_minimal() + scale_y_log10() + scale_x_continuous(breaks = 1:20, limits = c(1, 20))
ggplot(df.orf.cnt, aes(x = cnt, y = len)) +
geom_jitter(width = 0.2, height = 0) +
theme_minimal() + scale_y_log10()
ggplot(df.orf.cnt, aes(x = cnt, y = len)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.7) +
theme_minimal() + scale_y_log10()
ggplot(df.orf.cnt, aes(x = cnt, y = len)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
theme_minimal() + scale_y_log10()
ggplot(df.orf.cnt, aes(x = cnt, y = len)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
theme_minimal() + scale_y_log10() + xlab('Frequency of presence') + ylab('Length')
ggplot(df.orf.cnt, aes(x = cnt, y = len)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
theme_bw() + scale_y_log10() + xlab('Frequency of presence') + ylab('Length')
path.figures
setwd("~/Library/CloudStorage/OneDrive-Personal/vienn/pacbio/1001Gplus_paper/02_analysis/01_organellas/02_scripts")
head(df.org)
df.orf.cnt = data.frame(cnt = tapply(df.org$id_new, df.org$id_new, length),
len = round(tapply(df.org$len, df.org$id_new, mean)),
type = tapply(df.org$type, df.org$id_new, unique))
df.orf.cnt$cnt = factor(df.orf.cnt$cnt, levels = 1:max(df.orf.cnt$cnt))
df.orf.cnt
p = ggplot(df.orf.cnt, aes(x = cnt, y = len, color=type)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
theme_minimal() + scale_y_log10() + xlab('Frequency of presence') + ylab('Length')
p
p = ggplot(df.orf.cnt, aes(x = cnt, y = len, color=type)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
theme_minimal() + scale_y_log10() + xlab('Frequency of presence') + ylab('Length') +
scale_colour_manual(values = c("Type1" = "#D83F31", "Type2" = "#3085C3"))
p
p
p = ggplot(df.orf.cnt, aes(x = cnt, y = len, color=type)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
theme_minimal() + scale_y_log10() + xlab('Frequency of presence') + ylab('Length') +
scale_colour_manual(values = c("mitochondria" = "#D83F31", "chloroplast" = "#3085C3"))
p
p = ggplot(df.orf.cnt, aes(x = cnt, y = len, color=type)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
theme_minimal() + scale_y_log10() + xlab('Frequency of presence') + ylab('Length') +
scale_colour_manual(values = c("mitochondria" = "#D83F31", "chloroplast" = "#3085C3")) +
theme(legend.position = c(0.95, 0.95), legend.justification = c("right", "top"))
p
p = ggplot(df.orf.cnt, aes(x = cnt, y = len, color=type)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
theme_minimal() + scale_y_log10() + xlab('Frequency of presence') + ylab('Length') +
scale_colour_manual(values = c("mitochondria" = "#D83F31", "chloroplast" = "#3085C3")) +
theme(legend.position = c(0.95, 0.95), legend.justification = c("right", "top"), legend.title = NULL)
p
p = ggplot(df.orf.cnt, aes(x = cnt, y = len, color=type)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
theme_minimal() + scale_y_log10() + xlab('Frequency of presence') + ylab('Length') +
scale_colour_manual(values = c("mitochondria" = "#D83F31", "chloroplast" = "#3085C3")) +
theme(legend.position = c(0.95, 0.95), legend.justification = c("right", "top"),
legend.title = element_blank())
p
pdf(paste(path.figures, 'fig_organella_stat.pdf', sep = ''), width = 5, height = 4)
print(p)
dev.off()
p = ggplot(df.orf.cnt, aes(x = cnt, y = len, color=type)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
theme_minimal() + scale_y_log10() + xlab('Frequency of presence') + ylab('Length') +
scale_colour_manual(values = c("mitochondria" = "#D83F31", "chloroplast" = "#3085C3")) +
theme(legend.position = c(0.95, 0.95), legend.justification = c("right", "top"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white", colour = "black", size = 0.5))
p
p = ggplot(df.orf.cnt, aes(x = cnt, y = len, color=type)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.5) +
theme_minimal() + scale_y_log10() + xlab('Frequency of presence') + ylab('Length') +
scale_colour_manual(values = c("mitochondria" = "#D83F31", "chloroplast" = "#3085C3")) +
theme(legend.position = c(0.95, 0.95), legend.justification = c("right", "top"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white", colour = "#7D7C7C", size = 0.5))
p
pdf(paste(path.figures, 'fig_organella_stat.pdf', sep = ''), width = 5, height = 4)
print(p)
dev.off()
library(cultevo)  #hammingdists
library(ggplot2)
library(ggtree)
# library('ggmsa')
library(gridExtra)
library(egg)
path.base = '../../../'
path.work = paste(path.base, '01_data_common/02_annot_denovo/02_pannagram/svs/', sep = '')
path.figures = paste(path.base, '02_analysis/04_sv/03_figures/', sep = '')
path.genes = paste(path.base, '01_data_common/02_annot_denovo/02_pannagram/genes/', sep = '')
path.data.snps = paste(path.base, '02_analysis/06_snps/01_data/', sep = '')
# path.work = '/Volumes/Samsung_T5/vienn/work_sv/'
# path.figures = paste(path.work, 'figures/', sep = '')
# path.genes = '/Volumes/Samsung_T5/vienn/work_genomes/'
file.sv = 'sv_se.rds'
file.sv.all = 'sv_all_events.rds'
pokaz <- function(...) {
arguments <- paste(..., sep = " ")
message(arguments)
}
sv.se = readRDS(paste(path.work, file.sv, sep = ''))
# Rename groups
lev.replace = c('[1,10]', '(10,15]')
lev.new = '[1,15]'
s.levels = as.character(levels(sv.se$len.gr))
s.levels = s.levels[!(s.levels %in% lev.replace)]
s.levels = c(lev.new, s.levels)
s.levels = gsub("e\\+03", "k", s.levels)
sv.se$len.gr = as.character(sv.se$len.gr)
sv.se$len.gr[sv.se$len.gr %in% lev.replace] = lev.new
sv.se$len.gr = gsub("e\\+03", "k", sv.se$len.gr)
sv.se$len.gr = factor(sv.se$len.gr, levels = s.levels)
sv.all = readRDS(paste(path.work, file.sv.all, sep = ''))
sv.pos.beg = read.table(paste(path.work, 'svs_all_beg_pos_v03.txt', sep = ''), stringsAsFactors = F, check.names = F)
sv.pos.end = read.table(paste(path.work, 'svs_all_end_pos_v03.txt', sep = ''), stringsAsFactors = F, check.names = F)
# sv.se = sv.se[sv.se$gr %in% sv.my.seb$gr,]
path.edta = '../../../01_data_common/03_annot_repeat/'
files.edta <- list.files(path = path.edta, pattern = "\\.gff$")
files.edta
sv.sin
head(sv.se)
sv.sin = sv.se[(sv.se$freq.max >= 25) | (sv.se$freq.max <= 3), ]
sv.sin$insert = (sv.sin$freq.max < 20) * 1
files.edta
ann.edta = c()
for(f in files.edta){
ann.tmp = read.table(paste(path.edta, f, sep = ''), stringsAsFactors = F)
ann.tmp$acc = gsub("\\.gff$", "", f)
ann.edta = rbind(ann.edta, ann.tmp)
}
ann.edta = c()
for(f in files.edta){
ann.tmp = read.table(paste(path.edta, f, sep = ''), stringsAsFactors = F)
ann.tmp$acc = gsub("\\.gff$", "", f)
ann.edta = rbind(ann.edta, ann.tmp)
}
ann.tmp = read.table(paste(path.edta, f, sep = ''), stringsAsFactors = F)
ann.tmp$acc = gsub("\\.gff$", "", f)
ann.edta = rbind(ann.edta, ann.tmp)
ann.edta = c()
for(f in files.edta){
ann.tmp = read.table(paste(path.edta, f, sep = ''), stringsAsFactors = F)
ann.tmp$acc = gsub("\\.gff$", "", f)
ann.edta = rbind(ann.edta, ann.tmp)
}
ann.edta = c()
for(f in files.edta){
pokaz(f)
ann.tmp = read.table(paste(path.edta, f, sep = ''), stringsAsFactors = F)
ann.tmp$acc = gsub("\\.gff$", "", f)
ann.edta = rbind(ann.edta, ann.tmp)
}
accessions = unique(ann.edta$acc)
accessions
head(sv.sin)
sv.sin$0
sv.sin$freq.max = sv.sin$freq.max - sv.sin[,'0']
sv.sin = sv.sin[sv.sin$freq.max!= 0,]
unique(sv.sin$freq.max + sv.sin$freq.min)
sv.sin = sv.se
sv.sin$freq.max = sv.sin$freq.max - (sv.sin[,'0'] > 0)*1
sv.sin = sv.sin[sv.sin$freq.max!= 0,]
unique(sv.sin$freq.max + sv.sin$freq.min)
which(sv.sin$freq.max + sv.sin$freq.min == 28)
sv.sin[1670,]
sv.sin = sv.se
sv.sin$freq.max = sv.sin$freq.max - (sv.sin[,'0'] > 0)*1
sv.sin$freq.min = sv.sin$freq.min - (sv.sin[,'0'] == 0)*1
sv.sin = sv.sin[sv.sin$freq.max != 0,]
sv.sin = sv.sin[sv.sin$freq.min != 0,]
unique(sv.sin$freq.max + sv.sin$freq.min)
which(sv.sin$freq.max + sv.sin$freq.min == 28)
sv.se[391172,]
sv.sin$freq.max = sv.sin$freq.max - (sv.sin[,'0'] > 0)*1
sv.se[391172,]
sv.se[391172,'0']
sv.se[391172,'0'] > 0
(sv.se[391172,'0'] > 0) * 1
sv.sin$freq.max[391172]
sv.sin = sv.se
sv.sin$freq.max = sv.sin$freq.max - (sv.sin[,'0'] > 0)*1
sv.sin$freq.min = sv.sin$freq.min - (sv.sin[,'0'] == 0)*1
sv.sin = sv.sin[sv.sin$freq.max != 0,]
sv.sin = sv.sin[sv.sin$freq.min != 0,]
unique(sv.sin$freq.max + sv.sin$freq.min)
which(sv.sin$freq.max + sv.sin$freq.min == 28)
sv.sin[510674,]
sv.sin = sv.se
sv.sin$freq.max = sv.sin$freq.max - (sv.sin[,'0'] > 0)*1
sv.sin$freq.min = sv.sin$freq.min - (sv.sin[,'0'] <= 0)*1
sv.sin = sv.sin[sv.sin$freq.max != 0,]
sv.sin = sv.sin[sv.sin$freq.min != 0,]
unique(sv.sin$freq.max + sv.sin$freq.min)
which(sv.sin$freq.max + sv.sin$freq.min == 28)
sv.sin = sv.se[(sv.se$freq.max >= 24) | (sv.se$freq.max <= 3), ]
sv.sin = sv.se
sv.sin$freq.max = sv.sin$freq.max - (sv.sin[,'0'] > 0)*1
sv.sin$freq.min = sv.sin$freq.min - (sv.sin[,'0'] <= 0)*1
sv.sin = sv.sin[sv.sin$freq.max != 0,]
sv.sin = sv.sin[sv.sin$freq.min != 0,]
unique(sv.sin$freq.max + sv.sin$freq.min)
sv.sin = sv.sin[(sv.sin$freq.max >= 24) | (sv.sin$freq.max <= 3), ]
if(length(unique(sv.sin$freq.max + sv.sin$freq.min) > 0)) stop('WRONG number of accessions')
if(length(unique(sv.sin$freq.max + sv.sin$freq.min) > 1)) stop('WRONG number of accessions')
length(unique(sv.sin$freq.max + sv.sin$freq.min)
if(length(unique(sv.sin$freq.max + sv.sin$freq.min) )> 1) stop('WRONG number of accessions')
sv.sin = sv.sin[(sv.sin$freq.max >= 24) | (sv.sin$freq.max <= 3), ]
# Remove Tair-10
sv.sin = sv.se
sv.sin$freq.max = sv.sin$freq.max - (sv.sin[,'0'] > 0)*1
sv.sin$freq.min = sv.sin$freq.min - (sv.sin[,'0'] <= 0)*1
sv.sin = sv.sin[sv.sin$freq.max != 0,]
sv.sin = sv.sin[sv.sin$freq.min != 0,]
if(length(unique(sv.sin$freq.max + sv.sin$freq.min) )> 1) stop('WRONG number of accessions')
sv.sin = sv.sin[(sv.sin$freq.max >= 24) | (sv.sin$freq.max <= 3), ]
sv.sin$insert = (sv.sin$freq.max < 20) * 1
accessions
ann.edta$chr = gsub("Chr", "", ann.edta$V1)
head(ann.edta)
ann.edta$chr = as.numeric(sapply(ann.edta$V1, function(s) strsplit(s, 'Chr')[[1]][2]))
unique(ann.edta$chr)
which(is.na(ann.edta$chr))
ann.edta[30675,]
ann.edta = ann.edta[!is.na(ann.edta$chr),]
i.chr =
1
acc = accessions[1]
head(sv.se)
unique(sv.sin$te)
sv.sin = sv.sin[sv.sin$te == 'isTEpart',]
dim(sv.sin)
ann.acc = ann[(ann$acc == acc) & (ann$chr == i.chr),]
ann.acc = ann.edta[(ann.edta$acc == acc) & (ann.edta$chr == i.chr),]
head(ann.acc)
pos.edta = rep(0, 40000000)
for(irow in 1:nrow(ann.acc)){
pos.edta[ann.acc$V4[irow]:ann.acc$V5[irow]] = 1
}
sum(pos.edta)
head(sv.sin.bin)
sv.sin = sv.se
sv.sin$tair.bin = (sv.sin[,'0'] > sv.sin$len / 2) * 1
sv.sin$freq.max = sv.sin$freq.max - (sv.sin$tair.bin == 1) * 1
sv.sin$freq.min = sv.sin$freq.min - (sv.sin$tair.bin == -1) * 1
sv.sin = sv.sin[sv.sin$freq.max != 0,]
sv.sin = sv.sin[sv.sin$freq.min != 0,]
if(length(unique(sv.sin$freq.max + sv.sin$freq.min) )> 1) stop('WRONG number of accessions')
unique(sv.sin$freq.max + sv.sin$freq.min)
which(sv.sin$freq.max + sv.sin$freq.min == 28)
sv.se[1738,]
sv.sin[1738,]
sv.sin = sv.se
sv.sin$tair.bin = (sv.sin[,'0'] > sv.sin$len / 2) * 1
sv.sin$freq.max = sv.sin$freq.max - (sv.sin$tair.bin == 1) * 1
sv.sin$freq.min = sv.sin$freq.min - (sv.sin$tair.bin == 0) * 1
sv.sin = sv.sin[sv.sin$freq.max != 0,]
sv.sin = sv.sin[sv.sin$freq.min != 0,]
if(length(unique(sv.sin$freq.max + sv.sin$freq.min) )> 1) stop('WRONG number of accessions')
sv.sin = sv.sin[(sv.sin$freq.max >= 24) | (sv.sin$freq.max <= 3), ]
sv.sin$insert = (sv.sin$freq.max < 20) * 1
sv.sin = sv.sin[sv.sin$te == 'isTEpart',]
accessions = colnames(sv.beg)
sv.sin.bin.acc = sv.sin[,acc] >= sv.sin$len/2
table(sv.sin.bin.acc)
idx.check.insert = (sv.sin$insert == 1) & (sv.sin.bin.acc == 0) & (sv.sin$chr == i.chr)
idx.check.delet = (sv.sin$insert == 0) & (sv.sin.bin.acc == 1) & (sv.sin$chr == i.chr)
idx.interest = which(idx.check.insert | idx.check.delet)
length(idx.interest)
sv.beg
sv.beg = sv.beg.init[sv.sin$gr,]
sv.beg = sv.pos.beg[sv.sin$gr,]
sv.end = sv.pos.end[sv.sin$gr,]
dim(sv.beg)
sv.acc.beg = sv.beg[idx.interest,acc]
sv.acc.end = sv.end[idx.interest,acc]
sv.acc.gr = sv.sin[idx.interest,'gr']
sv.acc.gr
sv.acc
sv.acc
sv.acc = sv.sin[idx.interest,acc]
sv.acc.beg = sv.beg[idx.interest,acc]
sv.acc.end = sv.end[idx.interest,acc]
sv.acc.gr = sv.sin[idx.interest,'gr']
sv.acc[sv.acc.beg == 0] = -1
sv.acc[sv.acc.end == 0] = -1
sv.acc
sv.acc
sv.sin.bin.acc
sv.sin.bin.acc = (sv.sin[,acc] >= sv.sin$len/2) * 1
idx.check.insert = (sv.sin$insert == 1) & (sv.sin.bin.acc == 0) & (sv.sin$chr == i.chr)
idx.check.delet = (sv.sin$insert == 0) & (sv.sin.bin.acc == 1) & (sv.sin$chr == i.chr)
idx.interest = which(idx.check.insert | idx.check.delet)
sv.acc = sv.sin[idx.interest,acc]
sv.acc.beg = sv.beg[idx.interest,acc]
sv.acc.end = sv.end[idx.interest,acc]
sv.acc.gr = sv.sin[idx.interest,'gr']
sv.acc[sv.acc.beg == 0] = -1
sv.acc[sv.acc.end == 0] = -1
sv.in.te = rep(0, length(idx.interest))
sv.sin.bin.acc = sv.sin.bin.acc[idx.interest]
sv.sin.bin.acc
sv.sin.bin.acc = (sv.sin[,acc] >= sv.sin$len/2) * 1
idx.check.insert = (sv.sin$insert == 1) & (sv.sin.bin.acc == 0) & (sv.sin$chr == i.chr)
idx.check.delet = (sv.sin$insert == 0) & (sv.sin.bin.acc == 1) & (sv.sin$chr == i.chr)
idx.interest = which(idx.check.insert | idx.check.delet)
sv.sin.bin.acc = sv.sin.bin.acc[idx.interest]
sv.acc = sv.sin[idx.interest,acc]
sv.acc.beg = sv.beg[idx.interest,acc]
sv.acc.end = sv.end[idx.interest,acc]
sv.acc.gr = sv.sin[idx.interest,'gr']
sv.acc[sv.acc.beg == 0] = -1
sv.acc[sv.acc.end == 0] = -1
cbind(sv.sin.bin.acc, sv.acc)
head(sv.acc)
irow = 1
sv.acc.beg[irow]
sv.acc.end[irow]
pos.tmp = c((sv.acc.beg[irow] - n.wind):sv.acc.beg[irow], sv.acc.end[irow]:(sv.acc.end[irow]+n.wind))
n.wind = 200
pos.tmp = c((sv.acc.beg[irow] - n.wind):sv.acc.beg[irow], sv.acc.end[irow]:(sv.acc.end[irow]+n.wind))
pos.tmp = c((sv.acc.beg[irow] - n.wind):sv.acc.beg[irow], sv.acc.end[irow]:(sv.acc.end[irow]+n.wind))
pos.tmp = c((sv.acc.beg[irow] - n.wind):sv.acc.beg[irow], sv.acc.end[irow]:(sv.acc.end[irow]+n.wind))
edta.tmp = sum(pos.gene[pos.tmp])
sv.in.edta = rep(0, length(idx.interest))
n.wind = 200
for(irow in 1:length(sv.acc)){
if(sv.acc[irow] == -1) next
pos.tmp = c((sv.acc.beg[irow] - n.wind):sv.acc.beg[irow], sv.acc.end[irow]:(sv.acc.end[irow]+n.wind))
if((pos.edta[sv.acc.end[irow]] == 1) & (pos.edta[sv.acc.beg[irow]] == 1) & (gene.tmp > 0)){
sv.in.edta[irow] = sum(pos.edta[pos.tmp])
}
}
sum(pos.edta[pos.tmp])
sv.in.edta = rep(0, length(idx.interest))
n.wind = 200
for(irow in 1:length(sv.acc)){
if(sv.acc[irow] == -1) next
pos.tmp = c((sv.acc.beg[irow] - n.wind):sv.acc.beg[irow], sv.acc.end[irow]:(sv.acc.end[irow]+n.wind))
if((pos.edta[sv.acc.end[irow]] == 1) & (pos.edta[sv.acc.beg[irow]] == 1)){
sv.in.edta[irow] = sum(pos.edta[pos.tmp])
}
}
sv.in.edta
plot(sv.in.edta, sv.sin.bin.acc)
table(sv.in.edta > 0, sv.sin.bin.acc)
table(sv.in.edta, sv.acc)
plot(sv.in.edta, sv.acc)
head(sv.acc)
sv.sin$in.edta = 0
for(acc in accessions){
if(acc == '0') next
print(acc)
for(i.chr in 1:5){
ann.acc = ann.edta[(ann.edta$acc == acc) & (ann.edta$chr == i.chr),]
ann.acc = ann.acc[order(ann.acc$V4),]
pos.edta = rep(0, 40000000)
for(irow in 1:nrow(ann.acc)){
pos.edta[ann.acc$V4[irow]:ann.acc$V5[irow]] = 1
}
sv.sin.bin.acc = (sv.sin[,acc] >= sv.sin$len/2) * 1
idx.check.insert = (sv.sin$insert == 1) & (sv.sin.bin.acc == 0) & (sv.sin$chr == i.chr)
idx.check.delet = (sv.sin$insert == 0) & (sv.sin.bin.acc == 1) & (sv.sin$chr == i.chr)
idx.interest = which(idx.check.insert | idx.check.delet)
sv.sin.bin.acc = sv.sin.bin.acc[idx.interest]
sv.acc = sv.sin[idx.interest,acc]
sv.acc.beg = sv.beg[idx.interest,acc]
sv.acc.end = sv.end[idx.interest,acc]
sv.acc.gr = sv.sin[idx.interest,'gr']
sv.acc[sv.acc.beg == 0] = -1
sv.acc[sv.acc.end == 0] = -1
sv.in.edta = rep(0, length(idx.interest))
n.wind = 200
for(irow in 1:length(sv.acc)){
if(sv.acc[irow] == -1) next
pos.tmp = c((sv.acc.beg[irow] - n.wind):sv.acc.beg[irow], sv.acc.end[irow]:(sv.acc.end[irow]+n.wind))
if((pos.edta[sv.acc.end[irow]] == 1) & (pos.edta[sv.acc.beg[irow]] == 1)){
sv.in.edta[irow] = sum(pos.edta[pos.tmp])
}
}
sv.sin$in.edta[idx.interest] = sv.sin$in.edta[idx.interest] + (sv.in.edta > 0) * 1
}
}
table(sv.sin$in.edta > 0, sv.sin$insert)
sv.sin = sv.se
sv.sin$tair.bin = (sv.sin[,'0'] > sv.sin$len / 2) * 1
sv.sin$freq.max = sv.sin$freq.max - (sv.sin$tair.bin == 1) * 1
sv.sin$freq.min = sv.sin$freq.min - (sv.sin$tair.bin == 0) * 1
sv.sin = sv.sin[sv.sin$freq.max != 0,]
sv.sin = sv.sin[sv.sin$freq.min != 0,]
# Check
if(length(unique(sv.sin$freq.max + sv.sin$freq.min) )> 1) stop('WRONG number of accessions')
# Remain only extremes
sv.sin = sv.sin[(sv.sin$freq.max >= 24) | (sv.sin$freq.max <= 3), ]
# Defive insertion-deletion
sv.sin$insert = (sv.sin$freq.max < 20) * 1
sv.beg = sv.pos.beg[sv.sin$gr,]
sv.end = sv.pos.end[sv.sin$gr,]
sv.sin$in.edta = 0
for(acc in accessions){
if(acc == '0') next
print(acc)
for(i.chr in 1:5){
ann.acc = ann.edta[(ann.edta$acc == acc) & (ann.edta$chr == i.chr),]
ann.acc = ann.acc[order(ann.acc$V4),]
pos.edta = rep(0, 40000000)
for(irow in 1:nrow(ann.acc)){
pos.edta[ann.acc$V4[irow]:ann.acc$V5[irow]] = 1
}
sv.sin.bin.acc = (sv.sin[,acc] >= sv.sin$len/2) * 1
idx.check.insert = (sv.sin$insert == 1) & (sv.sin.bin.acc == 0) & (sv.sin$chr == i.chr)
idx.check.delet = (sv.sin$insert == 0) & (sv.sin.bin.acc == 1) & (sv.sin$chr == i.chr)
idx.interest = which(idx.check.insert | idx.check.delet)
sv.sin.bin.acc = sv.sin.bin.acc[idx.interest]
sv.acc = sv.sin[idx.interest,acc]
sv.acc.beg = sv.beg[idx.interest,acc]
sv.acc.end = sv.end[idx.interest,acc]
sv.acc.gr = sv.sin[idx.interest,'gr']
sv.acc[sv.acc.beg == 0] = -1
sv.acc[sv.acc.end == 0] = -1
sv.in.edta = rep(0, length(idx.interest))
n.wind = 200
for(irow in 1:length(sv.acc)){
if(sv.acc[irow] == -1) next
pos.tmp = c((sv.acc.beg[irow] - n.wind):sv.acc.beg[irow], sv.acc.end[irow]:(sv.acc.end[irow]+n.wind))
if((pos.edta[sv.acc.end[irow]] == 1) & (pos.edta[sv.acc.beg[irow]] == 1)){
sv.in.edta[irow] = sum(pos.edta[pos.tmp])
}
}
sv.sin$in.edta[idx.interest] = sv.sin$in.edta[idx.interest] + (sv.in.edta > 0) * 1
}
}
pos.tmp
sv.acc.beg[irow]
