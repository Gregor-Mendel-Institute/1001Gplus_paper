sv.sin$s.insert = c('deletion', 'insertion')[as.numeric(sv.sin$insert)+1]
len.min  = 15
g <- ggplot(sv.sin[(sv.sin$len <= len.min) & (sv.sin$pos.gene != 0) ,], aes(x=pos.gene)) +
geom_histogram(bins = 25, fill='#ABCDCB',color='grey20', alpha=0.7) + theme_minimal() +
facet_grid(rows = vars(mod3), cols = vars(interaction(s.pos.in.exon, s.insert)),
# scales = "free_y"
) +
theme(legend.position='none',
strip.text.y = element_text(angle = 0)) +
viridis::scale_fill_viridis() +
ggtitle(paste('Length <= ', len.min)) +
xlim(-100, 500) +
xlim(0, 500) +
xlab('distance to the TSS') +
xlab('distance to the TSS') + geom_vline(xintercept = 0, color = "#F4D160")
g
sv.sin$s.pos.in.exon = c('intron', 'exon')[sv.sin$pos.in.exon+1]
sv.sin$s.insert = c('deletion', 'insertion')[as.numeric(sv.sin$insert)+1]
len.min  = 15
g <- ggplot(sv.sin[(sv.sin$len <= len.min) & (sv.sin$pos.gene != 0) ,], aes(x=pos.gene)) +
geom_histogram(bins = 25, fill='#ABCDCB',color='grey20', alpha=0.7) + theme_minimal() +
facet_grid(rows = vars(mod3), cols = vars(interaction(s.pos.in.exon, s.insert)),
scales = "free_y"
) +
theme(legend.position='none',
strip.text.y = element_text(angle = 0)) +
viridis::scale_fill_viridis() +
ggtitle(paste('Length <= ', len.min)) +
xlim(-100, 500) +
xlim(0, 500) +
xlab('distance to the TSS') +
xlab('distance to the TSS') + geom_vline(xintercept = 0, color = "#F4D160")
g
sv.sin$s.pos.in.exon = c('intron', 'exon')[sv.sin$pos.in.exon+1]
sv.sin$s.insert = c('deletion', 'insertion')[as.numeric(sv.sin$insert)+1]
len.min  = 15
g <- ggplot(sv.sin[(sv.sin$len <= len.min) & (sv.sin$pos.gene != 0) ,], aes(x=pos.gene)) +
geom_histogram(bins = 30, fill='#ABCDCB',color='grey20', alpha=0.7) + theme_minimal() +
facet_grid(rows = vars(mod3), cols = vars(interaction(s.pos.in.exon, s.insert)),
scales = "free_y"
) +
theme(legend.position='none',
strip.text.y = element_text(angle = 0)) +
viridis::scale_fill_viridis() +
ggtitle(paste('Length <= ', len.min)) +
xlim(-100, 500) +
xlim(0, 500) +
xlab('distance to the TSS') +
xlab('distance to the TSS') + geom_vline(xintercept = 0, color = "#F4D160")
g
sv.sin$s.pos.in.exon = c('intron', 'exon')[sv.sin$pos.in.exon+1]
sv.sin$s.insert = c('deletion', 'insertion')[as.numeric(sv.sin$insert)+1]
len.min  = 15
g <- ggplot(sv.sin[(sv.sin$len <= len.min) & (sv.sin$pos.gene != 0) ,], aes(x=pos.gene)) +
geom_histogram(bins = 30, fill='#ABCDCB',color='grey20', alpha=0.7) + theme_minimal() +
facet_grid(rows = vars(mod3), cols = vars(interaction(s.pos.in.exon, s.insert)),
scales = "free_y"
) +
theme(legend.position='none',
strip.text.y = element_text(angle = 0)) +
viridis::scale_fill_viridis() +
ggtitle(paste('Length <= ', len.min)) +
xlim(-100, 500) +
xlab('distance to the TSS') +
xlab('distance to the TSS') + geom_vline(xintercept = 0, color = "#F4D160")
g
sv.sin$s.pos.in.exon = c('intron', 'exon')[sv.sin$pos.in.exon+1]
sv.sin$s.insert = c('deletion', 'insertion')[as.numeric(sv.sin$insert)+1]
len.min  = 15
g <- ggplot(sv.sin[(sv.sin$len <= len.min) & (sv.sin$pos.gene != 0) ,], aes(x=pos.gene)) +
geom_histogram(bins = 30, fill='#ABCDCB',color='grey20', alpha=0.7) + theme_minimal() +
facet_grid(rows = vars(mod3), cols = vars(interaction(s.pos.in.exon, s.insert)),
# scales = "free_y"
) +
theme(legend.position='none',
strip.text.y = element_text(angle = 0)) +
viridis::scale_fill_viridis() +
ggtitle(paste('Length <= ', len.min)) +
xlim(-100, 500) +
xlab('distance to the TSS') +
xlab('distance to the TSS') + geom_vline(xintercept = 0, color = "#F4D160")
g
sv.sin$s.pos.in.exon = c('intron', 'exon')[sv.sin$pos.in.exon+1]
sv.sin$s.insert = c('deletion', 'insertion')[as.numeric(sv.sin$insert)+1]
len.min  = 15
g <- ggplot(sv.sin[(sv.sin$len <= len.min) & (sv.sin$pos.gene != 0) ,], aes(x=pos.gene)) +
geom_histogram(bins = 30, fill='#ABCDCB',color='grey20', alpha=0.7) + theme_minimal() +
facet_grid(rows = vars(mod3), cols = vars(interaction(s.pos.in.exon, s.insert)),
# scales = "free_y"
) +
theme(legend.position='none',
strip.text.y = element_text(angle = 0)) +
viridis::scale_fill_viridis() +
ggtitle(paste('Length <= ', len.min)) +
xlim(-100, 500) +
xlab('distance to the TSS') +
xlab('distance to the TSS') + geom_vline(xintercept = 0, color = "#F4D160")
g
pdf(paste(path.figures, 'sv_len_distr_in_genes_tss_exons_len_less_eq_15_abs.pdf', sep = ''), width = 7, height = 4)
print(g)     # Plot 1 --> in the first page of PDF
dev.off()
sv.sin$s.pos.in.exon = c('intron', 'exon')[sv.sin$pos.in.exon+1]
sv.sin$s.insert = c('deletion', 'insertion')[as.numeric(sv.sin$insert)+1]
len.min  = 15
g <- ggplot(sv.sin[(sv.sin$len <= len.min) & (sv.sin$pos.gene != 0) ,], aes(x=pos.gene)) +
geom_histogram(bins = 30, fill='#ABCDCB',color='grey20', alpha=0.7) + theme_minimal() +
facet_grid(rows = vars(mod3), cols = vars(interaction(s.pos.in.exon, s.insert)),
scales = "free_y"
) +
theme(legend.position='none',
strip.text.y = element_text(angle = 0)) +
viridis::scale_fill_viridis() +
ggtitle(paste('Length <= ', len.min)) +
xlim(-100, 500) +
xlab('distance to the TSS') +
xlab('distance to the TSS') + geom_vline(xintercept = 0, color = "#F4D160")
g
pdf(paste(path.figures, 'sv_len_distr_in_genes_tss_exons_len_less_eq_15.pdf', sep = ''), width = 7, height = 4)
print(g)     # Plot 1 --> in the first page of PDF
dev.off()
len.min = 9
sv.sin$pos.gene = round(sv.sin$pos.gene)
g <- ggplot(sv.sin[(sv.sin$len <= len.min) & (sv.sin$pos.gene != 0) ,], aes(x=pos.gene)) +
geom_bar(fill='#ABCDCB',color='grey20', alpha=0.7) + theme_minimal() +
facet_grid(rows = vars(mod3), cols = vars(interaction(s.pos.in.exon, s.insert)),
# scales = "free_y"
) +
theme(legend.position='none',
strip.text.y = element_text(angle = 0)) +
viridis::scale_fill_viridis() +
ggtitle(paste('Length <= ', len.min)) +
# xlim(-100, 500) +
xlim(-20, 20) +
xlab('distance to the TSS') + geom_vline(xintercept = 0, color = "#F4D160")
g
head(sv.se)
colnames(sv.se)
colnames(sv.all)
head(sv.se)
v <- sv.se$len / 2
N <- length(accessions)
v.rep <- rep(v, N)
sv.len.mx <- t(matrix(v.rep, ncol = length(v), byrow = TRUE))
sv.bin = (sv.se[,accessions] > sv.len.mx) * 1
v <- sv.se$len / 2
N <- length(accessions)
v.rep <- rep(v, N)
sv.len.mx <- t(matrix(v.rep, ncol = length(v), byrow = TRUE))
sv.bin = (sv.se[,accessions] > sv.len.mx) * 1
sv.se$have.gene = 0
for(acc in accessions){
if(acc == '0') next
print(acc)
for(i.chr in 1:5){
ann.acc = ann[(ann$acc == acc) & (ann$chr == i.chr),]
ann.acc = ann.acc[order(ann.acc$V4),]
ann.acc$len = abs(ann.acc$V4 - ann.acc$V5) + 1
ann.acc = ann.acc[ann.acc$len >= len.gene.min,]
pos.gene.plus = rep(0, 40000000)
pos.gene.mins = rep(0, 40000000)
pos.exon = rep(0, 40000000)
pos.gene.start = rep(0, 40000000)
for(irow in 1:nrow(ann.acc)){
if(ann.acc$V3[irow] == 'exon'){
pos.exon[ann.acc$V4[irow]:ann.acc$V5[irow]] = 1
} else if (ann.acc$V7[irow] == '+') {
pos.gene.plus[ann.acc$V4[irow]:ann.acc$V5[irow]] =
((ann.acc$V4[irow]:ann.acc$V5[irow]) - ann.acc$V4[irow] + 1) #/ ann.acc$len[irow]
pos.gene.start[ann.acc$V4[irow]] = 1
} else {
pos.gene.mins[ann.acc$V4[irow]:ann.acc$V5[irow]] =
((ann.acc$V5[irow]:ann.acc$V4[irow]) - ann.acc$V4[irow] + 1) #/ ann.acc$len[irow]
pos.gene.start[ann.acc$V5[irow]] = -1
}
}
# Get positions of interest
# CHANGED HERE COMPARING WITH THE PREVIOUS
# Here we check if the current accession has the sequence
idx.interest = which((sv.bin[,acc] == 1) & (sv.se$chr == i.chr))
sv.acc = sv.se[idx.interest,acc]
sv.acc.beg = sv.beg[idx.interest,acc]
sv.acc.end = sv.end[idx.interest,acc]
sv.acc.gr = sv.se[idx.interest,'gr']
sv.acc[sv.acc.beg == 0] = -1
sv.acc[sv.acc.end == 0] = -1
#
sv.in.gene.plus = rep(0, length(idx.interest))
sv.in.gene.mins = rep(0, length(idx.interest))
sv.in.exon= rep(0, length(idx.interest))
for(irow in 1:length(sv.acc)){
if(sv.acc[irow] == -1) next
gene.tmp = sum(pos.gene.plus[sv.acc.beg[irow]:sv.acc.end[irow]])
if((pos.gene.plus[sv.acc.end[irow]] == 0) & (pos.gene.plus[sv.acc.beg[irow]] == 0) & (gene.tmp != 0)) {
# stop()
sv.in.gene.plus[irow] = 1
}
gene.tmp = sum(pos.gene.mins[sv.acc.beg[irow]:sv.acc.end[irow]])
if((pos.gene.mins[sv.acc.end[irow]] == 0) & (pos.gene.mins[sv.acc.beg[irow]] == 0) & (gene.tmp != 0)){
sv.in.gene.mins[irow] = 1
}
}
v = sv.in.gene.plus + sv.in.gene.mins
x = sv.se$pos.gene[idx.interest]
x[x == 0] = v[x == 0]
v[v == 0] = x[v == 0]
x = (x + v) / 2
sv.se$have.gene[idx.interest] = x
}
}
v
x
sv.se$pos.gene[idx.interest]
idx.interest
sv.se$pos.gene
v <- sv.se$len / 2
N <- length(accessions)
v.rep <- rep(v, N)
sv.len.mx <- t(matrix(v.rep, ncol = length(v), byrow = TRUE))
sv.bin = (sv.se[,accessions] > sv.len.mx) * 1
sv.se$have.gene = 0
for(acc in accessions){
if(acc == '0') next
print(acc)
for(i.chr in 1:5){
ann.acc = ann[(ann$acc == acc) & (ann$chr == i.chr),]
ann.acc = ann.acc[order(ann.acc$V4),]
ann.acc$len = abs(ann.acc$V4 - ann.acc$V5) + 1
ann.acc = ann.acc[ann.acc$len >= len.gene.min,]
pos.gene.plus = rep(0, 40000000)
pos.gene.mins = rep(0, 40000000)
pos.exon = rep(0, 40000000)
pos.gene.start = rep(0, 40000000)
for(irow in 1:nrow(ann.acc)){
if(ann.acc$V3[irow] == 'exon'){
pos.exon[ann.acc$V4[irow]:ann.acc$V5[irow]] = 1
} else if (ann.acc$V7[irow] == '+') {
pos.gene.plus[ann.acc$V4[irow]:ann.acc$V5[irow]] =
((ann.acc$V4[irow]:ann.acc$V5[irow]) - ann.acc$V4[irow] + 1) #/ ann.acc$len[irow]
pos.gene.start[ann.acc$V4[irow]] = 1
} else {
pos.gene.mins[ann.acc$V4[irow]:ann.acc$V5[irow]] =
((ann.acc$V5[irow]:ann.acc$V4[irow]) - ann.acc$V4[irow] + 1) #/ ann.acc$len[irow]
pos.gene.start[ann.acc$V5[irow]] = -1
}
}
# Get positions of interest
# CHANGED HERE COMPARING WITH THE PREVIOUS
# Here we check if the current accession has the sequence
idx.interest = which((sv.bin[,acc] == 1) & (sv.se$chr == i.chr))
sv.acc = sv.se[idx.interest,acc]
sv.acc.beg = sv.beg[idx.interest,acc]
sv.acc.end = sv.end[idx.interest,acc]
sv.acc.gr = sv.se[idx.interest,'gr']
sv.acc[sv.acc.beg == 0] = -1
sv.acc[sv.acc.end == 0] = -1
#
sv.in.gene.plus = rep(0, length(idx.interest))
sv.in.gene.mins = rep(0, length(idx.interest))
sv.in.exon= rep(0, length(idx.interest))
for(irow in 1:length(sv.acc)){
if(sv.acc[irow] == -1) next
gene.tmp = sum(pos.gene.plus[sv.acc.beg[irow]:sv.acc.end[irow]])
if((pos.gene.plus[sv.acc.end[irow]] == 0) & (pos.gene.plus[sv.acc.beg[irow]] == 0) & (gene.tmp != 0)) {
# stop()
sv.in.gene.plus[irow] = 1
}
gene.tmp = sum(pos.gene.mins[sv.acc.beg[irow]:sv.acc.end[irow]])
if((pos.gene.mins[sv.acc.end[irow]] == 0) & (pos.gene.mins[sv.acc.beg[irow]] == 0) & (gene.tmp != 0)){
sv.in.gene.mins[irow] = 1
}
}
v = sv.in.gene.plus + sv.in.gene.mins
x = sv.se$have.gene[idx.interest]
x[x == 0] = v[x == 0]
v[v == 0] = x[v == 0]
x = (x + v) / 2
sv.se$have.gene[idx.interest] = x
}
}
head(sv.acc.beg)
irow
in sv.acc.beg[irow]
sv.acc.beg[irow]
length(sv.acc)
nrow(sv.acc)
sv.acc
dim(pos.gene.plus)
length(pos.gene.plus)
sv.acc.beg[irow]
length(sv.acc.beg)
irow
length(sv.acc)
v <- sv.se$len / 2
N <- length(accessions)
v.rep <- rep(v, N)
sv.len.mx <- t(matrix(v.rep, ncol = length(v), byrow = TRUE))
sv.bin = (sv.se[,accessions] > sv.len.mx) * 1
sv.se$have.gene = 0
for(acc in accessions){
if(acc == '0') next
print(acc)
for(i.chr in 1:5){
ann.acc = ann[(ann$acc == acc) & (ann$chr == i.chr),]
ann.acc = ann.acc[order(ann.acc$V4),]
ann.acc$len = abs(ann.acc$V4 - ann.acc$V5) + 1
ann.acc = ann.acc[ann.acc$len >= len.gene.min,]
pos.gene.plus = rep(0, 40000000)
pos.gene.mins = rep(0, 40000000)
pos.exon = rep(0, 40000000)
pos.gene.start = rep(0, 40000000)
for(irow in 1:nrow(ann.acc)){
if(ann.acc$V3[irow] == 'exon'){
pos.exon[ann.acc$V4[irow]:ann.acc$V5[irow]] = 1
} else if (ann.acc$V7[irow] == '+') {
pos.gene.plus[ann.acc$V4[irow]:ann.acc$V5[irow]] =
((ann.acc$V4[irow]:ann.acc$V5[irow]) - ann.acc$V4[irow] + 1) #/ ann.acc$len[irow]
pos.gene.start[ann.acc$V4[irow]] = 1
} else {
pos.gene.mins[ann.acc$V4[irow]:ann.acc$V5[irow]] =
((ann.acc$V5[irow]:ann.acc$V4[irow]) - ann.acc$V4[irow] + 1) #/ ann.acc$len[irow]
pos.gene.start[ann.acc$V5[irow]] = -1
}
}
message('x')
# Get positions of interest
# CHANGED HERE COMPARING WITH THE PREVIOUS
# Here we check if the current accession has the sequence
idx.interest = which((sv.bin[,acc] == 1) & (sv.se$chr == i.chr))
sv.acc = sv.se[idx.interest,acc]
sv.acc.beg = sv.beg[idx.interest,acc]
sv.acc.end = sv.end[idx.interest,acc]
sv.acc.gr = sv.se[idx.interest,'gr']
sv.acc[sv.acc.beg == 0] = -1
sv.acc[sv.acc.end == 0] = -1
#
sv.in.gene.plus = rep(0, length(idx.interest))
sv.in.gene.mins = rep(0, length(idx.interest))
sv.in.exon= rep(0, length(idx.interest))
for(irow in 1:length(sv.acc)){
if(sv.acc[irow] == -1) next
gene.tmp = sum(pos.gene.plus[sv.acc.beg[irow]:sv.acc.end[irow]])
if((pos.gene.plus[sv.acc.end[irow]] == 0) & (pos.gene.plus[sv.acc.beg[irow]] == 0) & (gene.tmp != 0)) {
# stop()
sv.in.gene.plus[irow] = 1
}
gene.tmp = sum(pos.gene.mins[sv.acc.beg[irow]:sv.acc.end[irow]])
if((pos.gene.mins[sv.acc.end[irow]] == 0) & (pos.gene.mins[sv.acc.beg[irow]] == 0) & (gene.tmp != 0)){
sv.in.gene.mins[irow] = 1
}
}
v = sv.in.gene.plus + sv.in.gene.mins
x = sv.se$have.gene[idx.interest]
x[x == 0] = v[x == 0]
v[v == 0] = x[v == 0]
x = (x + v) / 2
sv.se$have.gene[idx.interest] = x
}
}
irow
nrow(ann.acc)
if(ann.acc$V3[irow] == 'exon'){
pos.exon[ann.acc$V4[irow]:ann.acc$V5[irow]] = 1
} else if (ann.acc$V7[irow] == '+') {
pos.gene.plus[ann.acc$V4[irow]:ann.acc$V5[irow]] =
((ann.acc$V4[irow]:ann.acc$V5[irow]) - ann.acc$V4[irow] + 1) #/ ann.acc$len[irow]
pos.gene.start[ann.acc$V4[irow]] = 1
} else {
pos.gene.mins[ann.acc$V4[irow]:ann.acc$V5[irow]] =
((ann.acc$V5[irow]:ann.acc$V4[irow]) - ann.acc$V4[irow] + 1) #/ ann.acc$len[irow]
pos.gene.start[ann.acc$V5[irow]] = -1
}
ann.acc = ann[(ann$acc == acc) & (ann$chr == i.chr),]
ann.acc = ann.acc[order(ann.acc$V4),]
ann.acc$len = abs(ann.acc$V4 - ann.acc$V5) + 1
ann.acc = ann.acc[ann.acc$len >= len.gene.min,]
pos.gene.plus = rep(0, 40000000)
pos.gene.mins = rep(0, 40000000)
pos.exon = rep(0, 40000000)
pos.gene.start = rep(0, 40000000)
for(irow in 1:nrow(ann.acc)){
if(ann.acc$V3[irow] == 'exon'){
pos.exon[ann.acc$V4[irow]:ann.acc$V5[irow]] = 1
} else if (ann.acc$V7[irow] == '+') {
pos.gene.plus[ann.acc$V4[irow]:ann.acc$V5[irow]] =
((ann.acc$V4[irow]:ann.acc$V5[irow]) - ann.acc$V4[irow] + 1) #/ ann.acc$len[irow]
pos.gene.start[ann.acc$V4[irow]] = 1
} else {
pos.gene.mins[ann.acc$V4[irow]:ann.acc$V5[irow]] =
((ann.acc$V5[irow]:ann.acc$V4[irow]) - ann.acc$V4[irow] + 1) #/ ann.acc$len[irow]
pos.gene.start[ann.acc$V5[irow]] = -1
}
}
message('x')
# Get positions of interest
# CHANGED HERE COMPARING WITH THE PREVIOUS
# Here we check if the current accession has the sequence
idx.interest = which((sv.bin[,acc] == 1) & (sv.se$chr == i.chr))
sv.acc = sv.se[idx.interest,acc]
sv.acc.beg = sv.beg[idx.interest,acc]
sv.acc.end = sv.end[idx.interest,acc]
sv.acc.gr = sv.se[idx.interest,'gr']
sv.acc[sv.acc.beg == 0] = -1
sv.acc[sv.acc.end == 0] = -1
#
sv.in.gene.plus = rep(0, length(idx.interest))
sv.in.gene.mins = rep(0, length(idx.interest))
sv.in.exon= rep(0, length(idx.interest))
for(irow in 1:length(sv.acc)){
if(sv.acc[irow] == -1) next
gene.tmp = sum(pos.gene.plus[sv.acc.beg[irow]:sv.acc.end[irow]])
if((pos.gene.plus[sv.acc.end[irow]] == 0) & (pos.gene.plus[sv.acc.beg[irow]] == 0) & (gene.tmp != 0)) {
# stop()
sv.in.gene.plus[irow] = 1
}
gene.tmp = sum(pos.gene.mins[sv.acc.beg[irow]:sv.acc.end[irow]])
if((pos.gene.mins[sv.acc.end[irow]] == 0) & (pos.gene.mins[sv.acc.beg[irow]] == 0) & (gene.tmp != 0)){
sv.in.gene.mins[irow] = 1
}
}
length(sv.acc)
irow
length(sv.acc.beg)
length(sv.acc.end)
sv.acc.beg[irow]
sum(is.na(sv.acc.beg))
pos.gene.plus = rep(0, 40000000)
pos.gene.mins = rep(0, 40000000)
pos.exon = rep(0, 40000000)
pos.gene.start = rep(0, 40000000)
for(irow in 1:nrow(ann.acc)){
if(ann.acc$V3[irow] == 'exon'){
pos.exon[ann.acc$V4[irow]:ann.acc$V5[irow]] = 1
} else if (ann.acc$V7[irow] == '+') {
pos.gene.plus[ann.acc$V4[irow]:ann.acc$V5[irow]] =
((ann.acc$V4[irow]:ann.acc$V5[irow]) - ann.acc$V4[irow] + 1) #/ ann.acc$len[irow]
pos.gene.start[ann.acc$V4[irow]] = 1
} else {
pos.gene.mins[ann.acc$V4[irow]:ann.acc$V5[irow]] =
((ann.acc$V5[irow]:ann.acc$V4[irow]) - ann.acc$V4[irow] + 1) #/ ann.acc$len[irow]
pos.gene.start[ann.acc$V5[irow]] = -1
}
if(sum(is.na(pos.gene.plus)) != 0) stop('a')
if(sum(is.na(pos.gene.mins)) != 0) stop('b')
}
v <- sv.se$len / 2
N <- length(accessions)
v.rep <- rep(v, N)
sv.len.mx <- t(matrix(v.rep, ncol = length(v), byrow = TRUE))
sv.bin = (sv.se[,accessions] > sv.len.mx) * 1
sv.se$have.gene = 0
for(acc in accessions){
if(acc == '0') next
print(acc)
for(i.chr in 1:5){
ann.acc = ann[(ann$acc == acc) & (ann$chr == i.chr),]
ann.acc = ann.acc[order(ann.acc$V4),]
ann.acc$len = abs(ann.acc$V4 - ann.acc$V5) + 1
ann.acc = ann.acc[ann.acc$len >= len.gene.min,]
pos.gene.plus = rep(0, 40000000)
pos.gene.mins = rep(0, 40000000)
pos.exon = rep(0, 40000000)
pos.gene.start = rep(0, 40000000)
for(irow in 1:nrow(ann.acc)){
if(ann.acc$V3[irow] == 'exon'){
pos.exon[ann.acc$V4[irow]:ann.acc$V5[irow]] = 1
} else if (ann.acc$V7[irow] == '+') {
pos.gene.plus[ann.acc$V4[irow]:ann.acc$V5[irow]] =
((ann.acc$V4[irow]:ann.acc$V5[irow]) - ann.acc$V4[irow] + 1) #/ ann.acc$len[irow]
pos.gene.start[ann.acc$V4[irow]] = 1
} else {
pos.gene.mins[ann.acc$V4[irow]:ann.acc$V5[irow]] =
((ann.acc$V5[irow]:ann.acc$V4[irow]) - ann.acc$V4[irow] + 1) #/ ann.acc$len[irow]
pos.gene.start[ann.acc$V5[irow]] = -1
}
if(sum(is.na(pos.gene.plus)) != 0) stop('a')
if(sum(is.na(pos.gene.mins)) != 0) stop('b')
}
message('x')
# Get positions of interest
# CHANGED HERE COMPARING WITH THE PREVIOUS
# Here we check if the current accession has the sequence
idx.interest = which((sv.bin[,acc] == 1) & (sv.se$chr == i.chr))
sv.acc = sv.se[idx.interest,acc]
sv.acc.beg = sv.beg[idx.interest,acc]
sv.acc.end = sv.end[idx.interest,acc]
sv.acc.gr = sv.se[idx.interest,'gr']
sv.acc[sv.acc.beg == 0] = -1
sv.acc[sv.acc.end == 0] = -1
#
sv.in.gene.plus = rep(0, length(idx.interest))
sv.in.gene.mins = rep(0, length(idx.interest))
sv.in.exon= rep(0, length(idx.interest))
for(irow in 1:length(sv.acc)){
if(sv.acc[irow] == -1) next
gene.tmp = sum(pos.gene.plus[sv.acc.beg[irow]:sv.acc.end[irow]])
if((pos.gene.plus[sv.acc.end[irow]] == 0) & (pos.gene.plus[sv.acc.beg[irow]] == 0) & (gene.tmp != 0)) {
# stop()
sv.in.gene.plus[irow] = 1
}
gene.tmp = sum(pos.gene.mins[sv.acc.beg[irow]:sv.acc.end[irow]])
if((pos.gene.mins[sv.acc.end[irow]] == 0) & (pos.gene.mins[sv.acc.beg[irow]] == 0) & (gene.tmp != 0)){
sv.in.gene.mins[irow] = 1
}
}
v = sv.in.gene.plus + sv.in.gene.mins
x = sv.se$have.gene[idx.interest]
x[x == 0] = v[x == 0]
v[v == 0] = x[v == 0]
x = (x + v) / 2
sv.se$have.gene[idx.interest] = x
}
}
